// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: api/device_profile.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Chirpstack.Api {

  /// <summary>Holder for reflection information generated from api/device_profile.proto</summary>
  public static partial class DeviceProfileReflection {

    #region Descriptor
    /// <summary>File descriptor for api/device_profile.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeviceProfileReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhhcGkvZGV2aWNlX3Byb2ZpbGUucHJvdG8SA2FwaRocZ29vZ2xlL2FwaS9h",
            "bm5vdGF0aW9ucy5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5w",
            "cm90bxobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGhNjb21tb24vY29t",
            "bW9uLnByb3RvIsgOCg1EZXZpY2VQcm9maWxlEgoKAmlkGAEgASgJEhEKCXRl",
            "bmFudF9pZBgCIAEoCRIMCgRuYW1lGAMgASgJEhMKC2Rlc2NyaXB0aW9uGBog",
            "ASgJEh4KBnJlZ2lvbhgEIAEoDjIOLmNvbW1vbi5SZWdpb24SJwoLbWFjX3Zl",
            "cnNpb24YBSABKA4yEi5jb21tb24uTWFjVmVyc2lvbhI2ChNyZWdfcGFyYW1z",
            "X3JldmlzaW9uGAYgASgOMhkuY29tbW9uLlJlZ1BhcmFtc1JldmlzaW9uEhgK",
            "EGFkcl9hbGdvcml0aG1faWQYByABKAkSMAoVcGF5bG9hZF9jb2RlY19ydW50",
            "aW1lGAggASgOMhEuYXBpLkNvZGVjUnVudGltZRIcChRwYXlsb2FkX2NvZGVj",
            "X3NjcmlwdBgJIAEoCRIfChdmbHVzaF9xdWV1ZV9vbl9hY3RpdmF0ZRgKIAEo",
            "CBIXCg91cGxpbmtfaW50ZXJ2YWwYCyABKA0SIgoaZGV2aWNlX3N0YXR1c19y",
            "ZXFfaW50ZXJ2YWwYDCABKA0SFQoNc3VwcG9ydHNfb3RhYRgNIAEoCBIYChBz",
            "dXBwb3J0c19jbGFzc19iGA4gASgIEhgKEHN1cHBvcnRzX2NsYXNzX2MYDyAB",
            "KAgSFwoPY2xhc3NfYl90aW1lb3V0GBAgASgNEh4KFmNsYXNzX2JfcGluZ19z",
            "bG90X25iX2sYESABKA0SHAoUY2xhc3NfYl9waW5nX3Nsb3RfZHIYEiABKA0S",
            "HgoWY2xhc3NfYl9waW5nX3Nsb3RfZnJlcRgTIAEoDRIXCg9jbGFzc19jX3Rp",
            "bWVvdXQYFCABKA0SFQoNYWJwX3J4MV9kZWxheRgVIAEoDRIZChFhYnBfcngx",
            "X2RyX29mZnNldBgWIAEoDRISCgphYnBfcngyX2RyGBcgASgNEhQKDGFicF9y",
            "eDJfZnJlcRgYIAEoDRIqCgR0YWdzGBkgAygLMhwuYXBpLkRldmljZVByb2Zp",
            "bGUuVGFnc0VudHJ5EjoKDG1lYXN1cmVtZW50cxgbIAMoCzIkLmFwaS5EZXZp",
            "Y2VQcm9maWxlLk1lYXN1cmVtZW50c0VudHJ5EiAKGGF1dG9fZGV0ZWN0X21l",
            "YXN1cmVtZW50cxgcIAEoCBIYChByZWdpb25fY29uZmlnX2lkGB0gASgJEhAK",
            "CGlzX3JlbGF5GB4gASgIEhMKC2lzX3JlbGF5X2VkGB8gASgIEhsKE3JlbGF5",
            "X2VkX3JlbGF5X29ubHkYICABKAgSFQoNcmVsYXlfZW5hYmxlZBghIAEoCBIy",
            "ChVyZWxheV9jYWRfcGVyaW9kaWNpdHkYIiABKA4yEy5hcGkuQ2FkUGVyaW9k",
            "aWNpdHkSIwobcmVsYXlfZGVmYXVsdF9jaGFubmVsX2luZGV4GCMgASgNEiEK",
            "GXJlbGF5X3NlY29uZF9jaGFubmVsX2ZyZXEYJCABKA0SHwoXcmVsYXlfc2Vj",
            "b25kX2NoYW5uZWxfZHIYJSABKA0SPwofcmVsYXlfc2Vjb25kX2NoYW5uZWxf",
            "YWNrX29mZnNldBgmIAEoDjIWLmFwaS5TZWNvbmRDaEFja09mZnNldBI6Chhy",
            "ZWxheV9lZF9hY3RpdmF0aW9uX21vZGUYJyABKA4yGC5hcGkuUmVsYXlNb2Rl",
            "QWN0aXZhdGlvbhIjChtyZWxheV9lZF9zbWFydF9lbmFibGVfbGV2ZWwYKCAB",
            "KA0SGQoRcmVsYXlfZWRfYmFja19vZmYYKSABKA0SKQohcmVsYXlfZWRfdXBs",
            "aW5rX2xpbWl0X2J1Y2tldF9zaXplGCogASgNEikKIXJlbGF5X2VkX3VwbGlu",
            "a19saW1pdF9yZWxvYWRfcmF0ZRgrIAEoDRIoCiByZWxheV9qb2luX3JlcV9s",
            "aW1pdF9yZWxvYWRfcmF0ZRgsIAEoDRImCh5yZWxheV9ub3RpZnlfbGltaXRf",
            "cmVsb2FkX3JhdGUYLSABKA0SLQolcmVsYXlfZ2xvYmFsX3VwbGlua19saW1p",
            "dF9yZWxvYWRfcmF0ZRguIAEoDRInCh9yZWxheV9vdmVyYWxsX2xpbWl0X3Jl",
            "bG9hZF9yYXRlGC8gASgNEigKIHJlbGF5X2pvaW5fcmVxX2xpbWl0X2J1Y2tl",
            "dF9zaXplGDAgASgNEiYKHnJlbGF5X25vdGlmeV9saW1pdF9idWNrZXRfc2l6",
            "ZRgxIAEoDRItCiVyZWxheV9nbG9iYWxfdXBsaW5rX2xpbWl0X2J1Y2tldF9z",
            "aXplGDIgASgNEicKH3JlbGF5X292ZXJhbGxfbGltaXRfYnVja2V0X3NpemUY",
            "MyABKA0aKwoJVGFnc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEo",
            "CToCOAEaRQoRTWVhc3VyZW1lbnRzRW50cnkSCwoDa2V5GAEgASgJEh8KBXZh",
            "bHVlGAIgASgLMhAuYXBpLk1lYXN1cmVtZW50OgI4ASI/CgtNZWFzdXJlbWVu",
            "dBIMCgRuYW1lGAIgASgJEiIKBGtpbmQYAyABKA4yFC5hcGkuTWVhc3VyZW1l",
            "bnRLaW5kIt0CChVEZXZpY2VQcm9maWxlTGlzdEl0ZW0SCgoCaWQYASABKAkS",
            "LgoKY3JlYXRlZF9hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASLgoKdXBkYXRlZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASDAoEbmFtZRgEIAEoCRIeCgZyZWdpb24YBSABKA4yDi5jb21tb24u",
            "UmVnaW9uEicKC21hY192ZXJzaW9uGAYgASgOMhIuY29tbW9uLk1hY1ZlcnNp",
            "b24SNgoTcmVnX3BhcmFtc19yZXZpc2lvbhgHIAEoDjIZLmNvbW1vbi5SZWdQ",
            "YXJhbXNSZXZpc2lvbhIVCg1zdXBwb3J0c19vdGFhGAggASgIEhgKEHN1cHBv",
            "cnRzX2NsYXNzX2IYCSABKAgSGAoQc3VwcG9ydHNfY2xhc3NfYxgKIAEoCCJI",
            "ChpDcmVhdGVEZXZpY2VQcm9maWxlUmVxdWVzdBIqCg5kZXZpY2VfcHJvZmls",
            "ZRgBIAEoCzISLmFwaS5EZXZpY2VQcm9maWxlIikKG0NyZWF0ZURldmljZVBy",
            "b2ZpbGVSZXNwb25zZRIKCgJpZBgBIAEoCSIlChdHZXREZXZpY2VQcm9maWxl",
            "UmVxdWVzdBIKCgJpZBgBIAEoCSKmAQoYR2V0RGV2aWNlUHJvZmlsZVJlc3Bv",
            "bnNlEioKDmRldmljZV9wcm9maWxlGAEgASgLMhIuYXBpLkRldmljZVByb2Zp",
            "bGUSLgoKY3JlYXRlZF9hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASLgoKdXBkYXRlZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXAiSAoaVXBkYXRlRGV2aWNlUHJvZmlsZVJlcXVlc3QSKgoOZGV2",
            "aWNlX3Byb2ZpbGUYASABKAsyEi5hcGkuRGV2aWNlUHJvZmlsZSIoChpEZWxl",
            "dGVEZXZpY2VQcm9maWxlUmVxdWVzdBIKCgJpZBgBIAEoCSJdChlMaXN0RGV2",
            "aWNlUHJvZmlsZXNSZXF1ZXN0Eg0KBWxpbWl0GAEgASgNEg4KBm9mZnNldBgC",
            "IAEoDRIOCgZzZWFyY2gYAyABKAkSEQoJdGVuYW50X2lkGAQgASgJIl0KGkxp",
            "c3REZXZpY2VQcm9maWxlc1Jlc3BvbnNlEhMKC3RvdGFsX2NvdW50GAEgASgN",
            "EioKBnJlc3VsdBgCIAMoCzIaLmFwaS5EZXZpY2VQcm9maWxlTGlzdEl0ZW0i",
            "aAomTGlzdERldmljZVByb2ZpbGVBZHJBbGdvcml0aG1zUmVzcG9uc2USEwoL",
            "dG90YWxfY291bnQYASABKA0SKQoGcmVzdWx0GAIgAygLMhkuYXBpLkFkckFs",
            "Z29yaXRobUxpc3RJdGVtIjAKFEFkckFsZ29yaXRobUxpc3RJdGVtEgoKAmlk",
            "GAEgASgJEgwKBG5hbWUYAiABKAkqMQoMQ29kZWNSdW50aW1lEggKBE5PTkUQ",
            "ABIPCgtDQVlFTk5FX0xQUBABEgYKAkpTEAIqUAoPTWVhc3VyZW1lbnRLaW5k",
            "EgsKB1VOS05PV04QABILCgdDT1VOVEVSEAESDAoIQUJTT0xVVEUQAhIJCgVH",
            "QVVHRRADEgoKBlNUUklORxAEKlUKDkNhZFBlcmlvZGljaXR5EgkKBVNFQ18x",
            "EAASCgoGTVNfNTAwEAESCgoGTVNfMjUwEAISCgoGTVNfMTAwEAMSCQoFTVNf",
            "NTAQBBIJCgVNU18yMBAFKmEKEVNlY29uZENoQWNrT2Zmc2V0EgkKBUtIWl8w",
            "EAASCwoHS0haXzIwMBABEgsKB0tIWl80MDAQAhILCgdLSFpfODAwEAMSDAoI",
            "S0haXzE2MDAQBBIMCghLSFpfMzIwMBAFKmwKE1JlbGF5TW9kZUFjdGl2YXRp",
            "b24SFgoSRElTQUJMRV9SRUxBWV9NT0RFEAASFQoRRU5BQkxFX1JFTEFZX01P",
            "REUQARILCgdEWU5BTUlDEAISGQoVRU5EX0RFVklDRV9DT05UUk9MTEVEEAMy",
            "uAUKFERldmljZVByb2ZpbGVTZXJ2aWNlEmwKBkNyZWF0ZRIfLmFwaS5DcmVh",
            "dGVEZXZpY2VQcm9maWxlUmVxdWVzdBogLmFwaS5DcmVhdGVEZXZpY2VQcm9m",
            "aWxlUmVzcG9uc2UiH4LT5JMCGSIUL2FwaS9kZXZpY2UtcHJvZmlsZXM6ASoS",
            "ZQoDR2V0EhwuYXBpLkdldERldmljZVByb2ZpbGVSZXF1ZXN0Gh0uYXBpLkdl",
            "dERldmljZVByb2ZpbGVSZXNwb25zZSIhgtPkkwIbEhkvYXBpL2RldmljZS1w",
            "cm9maWxlcy97aWR9EnYKBlVwZGF0ZRIfLmFwaS5VcGRhdGVEZXZpY2VQcm9m",
            "aWxlUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIzgtPkkwItGigv",
            "YXBpL2RldmljZS1wcm9maWxlcy97ZGV2aWNlX3Byb2ZpbGUuaWR9OgEqEmQK",
            "BkRlbGV0ZRIfLmFwaS5EZWxldGVEZXZpY2VQcm9maWxlUmVxdWVzdBoWLmdv",
            "b2dsZS5wcm90b2J1Zi5FbXB0eSIhgtPkkwIbKhkvYXBpL2RldmljZS1wcm9m",
            "aWxlcy97aWR9EmUKBExpc3QSHi5hcGkuTGlzdERldmljZVByb2ZpbGVzUmVx",
            "dWVzdBofLmFwaS5MaXN0RGV2aWNlUHJvZmlsZXNSZXNwb25zZSIcgtPkkwIW",
            "EhQvYXBpL2RldmljZS1wcm9maWxlcxKFAQoRTGlzdEFkckFsZ29yaXRobXMS",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkaKy5hcGkuTGlzdERldmljZVByb2Zp",
            "bGVBZHJBbGdvcml0aG1zUmVzcG9uc2UiK4LT5JMCJRIjL2FwaS9kZXZpY2Ut",
            "cHJvZmlsZXMvYWRyLWFsZ29yaXRobXNCagoRaW8uY2hpcnBzdGFjay5hcGlC",
            "EkRldmljZVByb2ZpbGVQcm90b1ABWi5naXRodWIuY29tL2NoaXJwc3RhY2sv",
            "Y2hpcnBzdGFjay9hcGkvZ28vdjQvYXBpqgIOQ2hpcnBzdGFjay5BcGliBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Chirpstack.Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Chirpstack.Api.CodecRuntime), typeof(global::Chirpstack.Api.MeasurementKind), typeof(global::Chirpstack.Api.CadPeriodicity), typeof(global::Chirpstack.Api.SecondChAckOffset), typeof(global::Chirpstack.Api.RelayModeActivation), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.DeviceProfile), global::Chirpstack.Api.DeviceProfile.Parser, new[]{ "Id", "TenantId", "Name", "Description", "Region", "MacVersion", "RegParamsRevision", "AdrAlgorithmId", "PayloadCodecRuntime", "PayloadCodecScript", "FlushQueueOnActivate", "UplinkInterval", "DeviceStatusReqInterval", "SupportsOtaa", "SupportsClassB", "SupportsClassC", "ClassBTimeout", "ClassBPingSlotNbK", "ClassBPingSlotDr", "ClassBPingSlotFreq", "ClassCTimeout", "AbpRx1Delay", "AbpRx1DrOffset", "AbpRx2Dr", "AbpRx2Freq", "Tags", "Measurements", "AutoDetectMeasurements", "RegionConfigId", "IsRelay", "IsRelayEd", "RelayEdRelayOnly", "RelayEnabled", "RelayCadPeriodicity", "RelayDefaultChannelIndex", "RelaySecondChannelFreq", "RelaySecondChannelDr", "RelaySecondChannelAckOffset", "RelayEdActivationMode", "RelayEdSmartEnableLevel", "RelayEdBackOff", "RelayEdUplinkLimitBucketSize", "RelayEdUplinkLimitReloadRate", "RelayJoinReqLimitReloadRate", "RelayNotifyLimitReloadRate", "RelayGlobalUplinkLimitReloadRate", "RelayOverallLimitReloadRate", "RelayJoinReqLimitBucketSize", "RelayNotifyLimitBucketSize", "RelayGlobalUplinkLimitBucketSize", "RelayOverallLimitBucketSize" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.Measurement), global::Chirpstack.Api.Measurement.Parser, new[]{ "Name", "Kind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.DeviceProfileListItem), global::Chirpstack.Api.DeviceProfileListItem.Parser, new[]{ "Id", "CreatedAt", "UpdatedAt", "Name", "Region", "MacVersion", "RegParamsRevision", "SupportsOtaa", "SupportsClassB", "SupportsClassC" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.CreateDeviceProfileRequest), global::Chirpstack.Api.CreateDeviceProfileRequest.Parser, new[]{ "DeviceProfile" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.CreateDeviceProfileResponse), global::Chirpstack.Api.CreateDeviceProfileResponse.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.GetDeviceProfileRequest), global::Chirpstack.Api.GetDeviceProfileRequest.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.GetDeviceProfileResponse), global::Chirpstack.Api.GetDeviceProfileResponse.Parser, new[]{ "DeviceProfile", "CreatedAt", "UpdatedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.UpdateDeviceProfileRequest), global::Chirpstack.Api.UpdateDeviceProfileRequest.Parser, new[]{ "DeviceProfile" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.DeleteDeviceProfileRequest), global::Chirpstack.Api.DeleteDeviceProfileRequest.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.ListDeviceProfilesRequest), global::Chirpstack.Api.ListDeviceProfilesRequest.Parser, new[]{ "Limit", "Offset", "Search", "TenantId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.ListDeviceProfilesResponse), global::Chirpstack.Api.ListDeviceProfilesResponse.Parser, new[]{ "TotalCount", "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.ListDeviceProfileAdrAlgorithmsResponse), global::Chirpstack.Api.ListDeviceProfileAdrAlgorithmsResponse.Parser, new[]{ "TotalCount", "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.Api.AdrAlgorithmListItem), global::Chirpstack.Api.AdrAlgorithmListItem.Parser, new[]{ "Id", "Name" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CodecRuntime {
    /// <summary>
    /// None.
    /// </summary>
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    /// Cayenne LPP.
    /// </summary>
    [pbr::OriginalName("CAYENNE_LPP")] CayenneLpp = 1,
    /// <summary>
    /// JavaScript.
    /// </summary>
    [pbr::OriginalName("JS")] Js = 2,
  }

  public enum MeasurementKind {
    /// <summary>
    /// Unknown (in which case it is not tracked).
    /// </summary>
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    /// <summary>
    /// Incrementing counters that never decrease (these are not reset on each reading).
    /// </summary>
    [pbr::OriginalName("COUNTER")] Counter = 1,
    /// <summary>
    /// Counters that do get reset upon reading.
    /// </summary>
    [pbr::OriginalName("ABSOLUTE")] Absolute = 2,
    /// <summary>
    /// E.g. a temperature value.
    /// </summary>
    [pbr::OriginalName("GAUGE")] Gauge = 3,
    /// <summary>
    /// E.g. a firmware version, true / false value.
    /// </summary>
    [pbr::OriginalName("STRING")] String = 4,
  }

  public enum CadPeriodicity {
    /// <summary>
    /// 1 second.
    /// </summary>
    [pbr::OriginalName("SEC_1")] Sec1 = 0,
    /// <summary>
    /// 500 milliseconds
    /// </summary>
    [pbr::OriginalName("MS_500")] Ms500 = 1,
    /// <summary>
    /// 250 milliseconds
    /// </summary>
    [pbr::OriginalName("MS_250")] Ms250 = 2,
    /// <summary>
    /// 100 milliseconds
    /// </summary>
    [pbr::OriginalName("MS_100")] Ms100 = 3,
    /// <summary>
    /// 50 milliseconds
    /// </summary>
    [pbr::OriginalName("MS_50")] Ms50 = 4,
    /// <summary>
    /// 20 milliseconds
    /// </summary>
    [pbr::OriginalName("MS_20")] Ms20 = 5,
  }

  public enum SecondChAckOffset {
    /// <summary>
    /// 0 kHz.
    /// </summary>
    [pbr::OriginalName("KHZ_0")] Khz0 = 0,
    /// <summary>
    /// 200 kHz.
    /// </summary>
    [pbr::OriginalName("KHZ_200")] Khz200 = 1,
    /// <summary>
    /// 400 kHz.
    /// </summary>
    [pbr::OriginalName("KHZ_400")] Khz400 = 2,
    /// <summary>
    /// 800 kHz.
    /// </summary>
    [pbr::OriginalName("KHZ_800")] Khz800 = 3,
    /// <summary>
    /// 1600 kHz.
    /// </summary>
    [pbr::OriginalName("KHZ_1600")] Khz1600 = 4,
    /// <summary>
    /// 3200 kHz.
    /// </summary>
    [pbr::OriginalName("KHZ_3200")] Khz3200 = 5,
  }

  public enum RelayModeActivation {
    /// <summary>
    /// Disable the relay mode.
    /// </summary>
    [pbr::OriginalName("DISABLE_RELAY_MODE")] DisableRelayMode = 0,
    /// <summary>
    /// Enable the relay model.
    /// </summary>
    [pbr::OriginalName("ENABLE_RELAY_MODE")] EnableRelayMode = 1,
    /// <summary>
    /// Dynamic.
    /// </summary>
    [pbr::OriginalName("DYNAMIC")] Dynamic = 2,
    /// <summary>
    /// End-device controlled.
    /// </summary>
    [pbr::OriginalName("END_DEVICE_CONTROLLED")] EndDeviceControlled = 3,
  }

  #endregion

  #region Messages
  public sealed partial class DeviceProfile : pb::IMessage<DeviceProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeviceProfile> _parser = new pb::MessageParser<DeviceProfile>(() => new DeviceProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DeviceProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceProfile(DeviceProfile other) : this() {
      id_ = other.id_;
      tenantId_ = other.tenantId_;
      name_ = other.name_;
      description_ = other.description_;
      region_ = other.region_;
      macVersion_ = other.macVersion_;
      regParamsRevision_ = other.regParamsRevision_;
      adrAlgorithmId_ = other.adrAlgorithmId_;
      payloadCodecRuntime_ = other.payloadCodecRuntime_;
      payloadCodecScript_ = other.payloadCodecScript_;
      flushQueueOnActivate_ = other.flushQueueOnActivate_;
      uplinkInterval_ = other.uplinkInterval_;
      deviceStatusReqInterval_ = other.deviceStatusReqInterval_;
      supportsOtaa_ = other.supportsOtaa_;
      supportsClassB_ = other.supportsClassB_;
      supportsClassC_ = other.supportsClassC_;
      classBTimeout_ = other.classBTimeout_;
      classBPingSlotNbK_ = other.classBPingSlotNbK_;
      classBPingSlotDr_ = other.classBPingSlotDr_;
      classBPingSlotFreq_ = other.classBPingSlotFreq_;
      classCTimeout_ = other.classCTimeout_;
      abpRx1Delay_ = other.abpRx1Delay_;
      abpRx1DrOffset_ = other.abpRx1DrOffset_;
      abpRx2Dr_ = other.abpRx2Dr_;
      abpRx2Freq_ = other.abpRx2Freq_;
      tags_ = other.tags_.Clone();
      measurements_ = other.measurements_.Clone();
      autoDetectMeasurements_ = other.autoDetectMeasurements_;
      regionConfigId_ = other.regionConfigId_;
      isRelay_ = other.isRelay_;
      isRelayEd_ = other.isRelayEd_;
      relayEdRelayOnly_ = other.relayEdRelayOnly_;
      relayEnabled_ = other.relayEnabled_;
      relayCadPeriodicity_ = other.relayCadPeriodicity_;
      relayDefaultChannelIndex_ = other.relayDefaultChannelIndex_;
      relaySecondChannelFreq_ = other.relaySecondChannelFreq_;
      relaySecondChannelDr_ = other.relaySecondChannelDr_;
      relaySecondChannelAckOffset_ = other.relaySecondChannelAckOffset_;
      relayEdActivationMode_ = other.relayEdActivationMode_;
      relayEdSmartEnableLevel_ = other.relayEdSmartEnableLevel_;
      relayEdBackOff_ = other.relayEdBackOff_;
      relayEdUplinkLimitBucketSize_ = other.relayEdUplinkLimitBucketSize_;
      relayEdUplinkLimitReloadRate_ = other.relayEdUplinkLimitReloadRate_;
      relayJoinReqLimitReloadRate_ = other.relayJoinReqLimitReloadRate_;
      relayNotifyLimitReloadRate_ = other.relayNotifyLimitReloadRate_;
      relayGlobalUplinkLimitReloadRate_ = other.relayGlobalUplinkLimitReloadRate_;
      relayOverallLimitReloadRate_ = other.relayOverallLimitReloadRate_;
      relayJoinReqLimitBucketSize_ = other.relayJoinReqLimitBucketSize_;
      relayNotifyLimitBucketSize_ = other.relayNotifyLimitBucketSize_;
      relayGlobalUplinkLimitBucketSize_ = other.relayGlobalUplinkLimitBucketSize_;
      relayOverallLimitBucketSize_ = other.relayOverallLimitBucketSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceProfile Clone() {
      return new DeviceProfile(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Device-profile ID (UUID).
    /// Note: on create this will be automatically generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tenant_id" field.</summary>
    public const int TenantIdFieldNumber = 2;
    private string tenantId_ = "";
    /// <summary>
    /// Tenant ID (UUID).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TenantId {
      get { return tenantId_; }
      set {
        tenantId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// Name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 26;
    private string description_ = "";
    /// <summary>
    /// Description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 4;
    private global::Chirpstack.Common.Region region_ = global::Chirpstack.Common.Region.Eu868;
    /// <summary>
    /// Region.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Common.Region Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "mac_version" field.</summary>
    public const int MacVersionFieldNumber = 5;
    private global::Chirpstack.Common.MacVersion macVersion_ = global::Chirpstack.Common.MacVersion.Lorawan100;
    /// <summary>
    /// LoRaWAN mac-version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Common.MacVersion MacVersion {
      get { return macVersion_; }
      set {
        macVersion_ = value;
      }
    }

    /// <summary>Field number for the "reg_params_revision" field.</summary>
    public const int RegParamsRevisionFieldNumber = 6;
    private global::Chirpstack.Common.RegParamsRevision regParamsRevision_ = global::Chirpstack.Common.RegParamsRevision.A;
    /// <summary>
    /// Regional parameters revision.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Common.RegParamsRevision RegParamsRevision {
      get { return regParamsRevision_; }
      set {
        regParamsRevision_ = value;
      }
    }

    /// <summary>Field number for the "adr_algorithm_id" field.</summary>
    public const int AdrAlgorithmIdFieldNumber = 7;
    private string adrAlgorithmId_ = "";
    /// <summary>
    /// ADR algorithm ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AdrAlgorithmId {
      get { return adrAlgorithmId_; }
      set {
        adrAlgorithmId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload_codec_runtime" field.</summary>
    public const int PayloadCodecRuntimeFieldNumber = 8;
    private global::Chirpstack.Api.CodecRuntime payloadCodecRuntime_ = global::Chirpstack.Api.CodecRuntime.None;
    /// <summary>
    /// Payload codec runtime.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Api.CodecRuntime PayloadCodecRuntime {
      get { return payloadCodecRuntime_; }
      set {
        payloadCodecRuntime_ = value;
      }
    }

    /// <summary>Field number for the "payload_codec_script" field.</summary>
    public const int PayloadCodecScriptFieldNumber = 9;
    private string payloadCodecScript_ = "";
    /// <summary>
    /// Payload codec script.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PayloadCodecScript {
      get { return payloadCodecScript_; }
      set {
        payloadCodecScript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flush_queue_on_activate" field.</summary>
    public const int FlushQueueOnActivateFieldNumber = 10;
    private bool flushQueueOnActivate_;
    /// <summary>
    /// Flush queue on device activation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FlushQueueOnActivate {
      get { return flushQueueOnActivate_; }
      set {
        flushQueueOnActivate_ = value;
      }
    }

    /// <summary>Field number for the "uplink_interval" field.</summary>
    public const int UplinkIntervalFieldNumber = 11;
    private uint uplinkInterval_;
    /// <summary>
    /// Uplink interval (seconds).
    /// This defines the expected uplink interval which the device uses for
    /// communication. If the uplink interval has expired and no uplink has
    /// been received, the device is considered inactive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UplinkInterval {
      get { return uplinkInterval_; }
      set {
        uplinkInterval_ = value;
      }
    }

    /// <summary>Field number for the "device_status_req_interval" field.</summary>
    public const int DeviceStatusReqIntervalFieldNumber = 12;
    private uint deviceStatusReqInterval_;
    /// <summary>
    /// Device-status request interval (times / day).
    /// This defines the times per day that ChirpStack will request the device-status
    /// from the device.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DeviceStatusReqInterval {
      get { return deviceStatusReqInterval_; }
      set {
        deviceStatusReqInterval_ = value;
      }
    }

    /// <summary>Field number for the "supports_otaa" field.</summary>
    public const int SupportsOtaaFieldNumber = 13;
    private bool supportsOtaa_;
    /// <summary>
    /// Supports OTAA.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SupportsOtaa {
      get { return supportsOtaa_; }
      set {
        supportsOtaa_ = value;
      }
    }

    /// <summary>Field number for the "supports_class_b" field.</summary>
    public const int SupportsClassBFieldNumber = 14;
    private bool supportsClassB_;
    /// <summary>
    /// Supports Class B.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SupportsClassB {
      get { return supportsClassB_; }
      set {
        supportsClassB_ = value;
      }
    }

    /// <summary>Field number for the "supports_class_c" field.</summary>
    public const int SupportsClassCFieldNumber = 15;
    private bool supportsClassC_;
    /// <summary>
    /// Supports Class-C.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SupportsClassC {
      get { return supportsClassC_; }
      set {
        supportsClassC_ = value;
      }
    }

    /// <summary>Field number for the "class_b_timeout" field.</summary>
    public const int ClassBTimeoutFieldNumber = 16;
    private uint classBTimeout_;
    /// <summary>
    /// Class-B timeout (seconds).
    /// This is the maximum time ChirpStack will wait to receive an acknowledgement from the device (if requested).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ClassBTimeout {
      get { return classBTimeout_; }
      set {
        classBTimeout_ = value;
      }
    }

    /// <summary>Field number for the "class_b_ping_slot_nb_k" field.</summary>
    public const int ClassBPingSlotNbKFieldNumber = 17;
    private uint classBPingSlotNbK_;
    /// <summary>
    /// Class-B ping-slots per beacon period.
    /// Valid options are: 0 - 7.
    ///
    /// The actual number of ping-slots per beacon period equals to 2^k.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ClassBPingSlotNbK {
      get { return classBPingSlotNbK_; }
      set {
        classBPingSlotNbK_ = value;
      }
    }

    /// <summary>Field number for the "class_b_ping_slot_dr" field.</summary>
    public const int ClassBPingSlotDrFieldNumber = 18;
    private uint classBPingSlotDr_;
    /// <summary>
    /// Class-B ping-slot DR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ClassBPingSlotDr {
      get { return classBPingSlotDr_; }
      set {
        classBPingSlotDr_ = value;
      }
    }

    /// <summary>Field number for the "class_b_ping_slot_freq" field.</summary>
    public const int ClassBPingSlotFreqFieldNumber = 19;
    private uint classBPingSlotFreq_;
    /// <summary>
    /// Class-B ping-slot freq (Hz).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ClassBPingSlotFreq {
      get { return classBPingSlotFreq_; }
      set {
        classBPingSlotFreq_ = value;
      }
    }

    /// <summary>Field number for the "class_c_timeout" field.</summary>
    public const int ClassCTimeoutFieldNumber = 20;
    private uint classCTimeout_;
    /// <summary>
    /// Class-C timeout (seconds).
    /// This is the maximum time ChirpStack will wait to receive an acknowledgement from the device (if requested).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ClassCTimeout {
      get { return classCTimeout_; }
      set {
        classCTimeout_ = value;
      }
    }

    /// <summary>Field number for the "abp_rx1_delay" field.</summary>
    public const int AbpRx1DelayFieldNumber = 21;
    private uint abpRx1Delay_;
    /// <summary>
    /// RX1 delay (for ABP).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AbpRx1Delay {
      get { return abpRx1Delay_; }
      set {
        abpRx1Delay_ = value;
      }
    }

    /// <summary>Field number for the "abp_rx1_dr_offset" field.</summary>
    public const int AbpRx1DrOffsetFieldNumber = 22;
    private uint abpRx1DrOffset_;
    /// <summary>
    /// RX1 DR offset (for ABP).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AbpRx1DrOffset {
      get { return abpRx1DrOffset_; }
      set {
        abpRx1DrOffset_ = value;
      }
    }

    /// <summary>Field number for the "abp_rx2_dr" field.</summary>
    public const int AbpRx2DrFieldNumber = 23;
    private uint abpRx2Dr_;
    /// <summary>
    /// RX2 DR (for ABP).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AbpRx2Dr {
      get { return abpRx2Dr_; }
      set {
        abpRx2Dr_ = value;
      }
    }

    /// <summary>Field number for the "abp_rx2_freq" field.</summary>
    public const int AbpRx2FreqFieldNumber = 24;
    private uint abpRx2Freq_;
    /// <summary>
    /// RX2 frequency (for ABP, Hz).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AbpRx2Freq {
      get { return abpRx2Freq_; }
      set {
        abpRx2Freq_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 25;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 202);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// User defined tags.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "measurements" field.</summary>
    public const int MeasurementsFieldNumber = 27;
    private static readonly pbc::MapField<string, global::Chirpstack.Api.Measurement>.Codec _map_measurements_codec
        = new pbc::MapField<string, global::Chirpstack.Api.Measurement>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Chirpstack.Api.Measurement.Parser), 218);
    private readonly pbc::MapField<string, global::Chirpstack.Api.Measurement> measurements_ = new pbc::MapField<string, global::Chirpstack.Api.Measurement>();
    /// <summary>
    /// Measurements.
    /// If defined, ChirpStack will visualize these metrics in the web-interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, global::Chirpstack.Api.Measurement> Measurements {
      get { return measurements_; }
    }

    /// <summary>Field number for the "auto_detect_measurements" field.</summary>
    public const int AutoDetectMeasurementsFieldNumber = 28;
    private bool autoDetectMeasurements_;
    /// <summary>
    /// Auto-detect measurements.
    /// If set to true, measurements will be automatically added based on the
    /// keys of the decoded payload. In cases where the decoded payload contains
    /// random keys in the data, you want to set this to false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AutoDetectMeasurements {
      get { return autoDetectMeasurements_; }
      set {
        autoDetectMeasurements_ = value;
      }
    }

    /// <summary>Field number for the "region_config_id" field.</summary>
    public const int RegionConfigIdFieldNumber = 29;
    private string regionConfigId_ = "";
    /// <summary>
    /// Region configuration ID.
    /// If set, devices will only use the associated region. If let blank, then
    /// devices will use all regions matching the selected common-name. Note
    /// that multiple region configurations can exist for the same common-name,
    /// e.g. to provide an 8 channel and 16 channel configuration for the US915
    /// band.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RegionConfigId {
      get { return regionConfigId_; }
      set {
        regionConfigId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_relay" field.</summary>
    public const int IsRelayFieldNumber = 30;
    private bool isRelay_;
    /// <summary>
    /// Device is a Relay device.
    /// Enable this in case the device is a Relay. A Relay device implements TS011
    /// and is able to relay data from relay capable devices.
    /// See for more information the TS011 specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRelay {
      get { return isRelay_; }
      set {
        isRelay_ = value;
      }
    }

    /// <summary>Field number for the "is_relay_ed" field.</summary>
    public const int IsRelayEdFieldNumber = 31;
    private bool isRelayEd_;
    /// <summary>
    /// Device is a Relay end-device.
    /// Enable this in case the device is an end-device that can operate under a
    /// Relay. Please refer to the TS011 specification for more information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRelayEd {
      get { return isRelayEd_; }
      set {
        isRelayEd_ = value;
      }
    }

    /// <summary>Field number for the "relay_ed_relay_only" field.</summary>
    public const int RelayEdRelayOnlyFieldNumber = 32;
    private bool relayEdRelayOnly_;
    /// <summary>
    /// End-device only accept data through relay.
    /// Only accept data for this device through a relay. This setting is useful
    /// for testing as in case of a test-setup, the end-device is usually within
    /// range of the gateway.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RelayEdRelayOnly {
      get { return relayEdRelayOnly_; }
      set {
        relayEdRelayOnly_ = value;
      }
    }

    /// <summary>Field number for the "relay_enabled" field.</summary>
    public const int RelayEnabledFieldNumber = 33;
    private bool relayEnabled_;
    /// <summary>
    /// Relay must be enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RelayEnabled {
      get { return relayEnabled_; }
      set {
        relayEnabled_ = value;
      }
    }

    /// <summary>Field number for the "relay_cad_periodicity" field.</summary>
    public const int RelayCadPeriodicityFieldNumber = 34;
    private global::Chirpstack.Api.CadPeriodicity relayCadPeriodicity_ = global::Chirpstack.Api.CadPeriodicity.Sec1;
    /// <summary>
    /// Relay CAD periodicity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Api.CadPeriodicity RelayCadPeriodicity {
      get { return relayCadPeriodicity_; }
      set {
        relayCadPeriodicity_ = value;
      }
    }

    /// <summary>Field number for the "relay_default_channel_index" field.</summary>
    public const int RelayDefaultChannelIndexFieldNumber = 35;
    private uint relayDefaultChannelIndex_;
    /// <summary>
    /// Relay default channel index.
    /// Valid values are 0 and 1, please refer to the RP002 specification for
    /// the meaning of these values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayDefaultChannelIndex {
      get { return relayDefaultChannelIndex_; }
      set {
        relayDefaultChannelIndex_ = value;
      }
    }

    /// <summary>Field number for the "relay_second_channel_freq" field.</summary>
    public const int RelaySecondChannelFreqFieldNumber = 36;
    private uint relaySecondChannelFreq_;
    /// <summary>
    /// Relay second channel frequency (Hz).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelaySecondChannelFreq {
      get { return relaySecondChannelFreq_; }
      set {
        relaySecondChannelFreq_ = value;
      }
    }

    /// <summary>Field number for the "relay_second_channel_dr" field.</summary>
    public const int RelaySecondChannelDrFieldNumber = 37;
    private uint relaySecondChannelDr_;
    /// <summary>
    /// Relay second channel DR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelaySecondChannelDr {
      get { return relaySecondChannelDr_; }
      set {
        relaySecondChannelDr_ = value;
      }
    }

    /// <summary>Field number for the "relay_second_channel_ack_offset" field.</summary>
    public const int RelaySecondChannelAckOffsetFieldNumber = 38;
    private global::Chirpstack.Api.SecondChAckOffset relaySecondChannelAckOffset_ = global::Chirpstack.Api.SecondChAckOffset.Khz0;
    /// <summary>
    /// Relay second channel ACK offset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Api.SecondChAckOffset RelaySecondChannelAckOffset {
      get { return relaySecondChannelAckOffset_; }
      set {
        relaySecondChannelAckOffset_ = value;
      }
    }

    /// <summary>Field number for the "relay_ed_activation_mode" field.</summary>
    public const int RelayEdActivationModeFieldNumber = 39;
    private global::Chirpstack.Api.RelayModeActivation relayEdActivationMode_ = global::Chirpstack.Api.RelayModeActivation.DisableRelayMode;
    /// <summary>
    /// Relay end-device activation mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Api.RelayModeActivation RelayEdActivationMode {
      get { return relayEdActivationMode_; }
      set {
        relayEdActivationMode_ = value;
      }
    }

    /// <summary>Field number for the "relay_ed_smart_enable_level" field.</summary>
    public const int RelayEdSmartEnableLevelFieldNumber = 40;
    private uint relayEdSmartEnableLevel_;
    /// <summary>
    /// Relay end-device smart-enable level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayEdSmartEnableLevel {
      get { return relayEdSmartEnableLevel_; }
      set {
        relayEdSmartEnableLevel_ = value;
      }
    }

    /// <summary>Field number for the "relay_ed_back_off" field.</summary>
    public const int RelayEdBackOffFieldNumber = 41;
    private uint relayEdBackOff_;
    /// <summary>
    /// Relay end-device back-off (in case it does not receive WOR ACK frame).
    /// 0 = Always send a LoRaWAN uplink
    /// 1..63 = Send a LoRaWAN uplink after X WOR frames without a WOR ACK
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayEdBackOff {
      get { return relayEdBackOff_; }
      set {
        relayEdBackOff_ = value;
      }
    }

    /// <summary>Field number for the "relay_ed_uplink_limit_bucket_size" field.</summary>
    public const int RelayEdUplinkLimitBucketSizeFieldNumber = 42;
    private uint relayEdUplinkLimitBucketSize_;
    /// <summary>
    /// Relay end-device uplink limit bucket size.
    ///
    /// This field indicates the multiplier to determine the bucket size
    /// according to the following formula:
    /// BucketSize TOKEN = _reload_rate x _bucket_size
    ///
    /// Valid values (0 - 3):
    ///   0 = 1
    ///   1 = 2
    ///   2 = 4
    ///   3 = 12
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayEdUplinkLimitBucketSize {
      get { return relayEdUplinkLimitBucketSize_; }
      set {
        relayEdUplinkLimitBucketSize_ = value;
      }
    }

    /// <summary>Field number for the "relay_ed_uplink_limit_reload_rate" field.</summary>
    public const int RelayEdUplinkLimitReloadRateFieldNumber = 43;
    private uint relayEdUplinkLimitReloadRate_;
    /// <summary>
    /// Relay end-device uplink limit reload rate.
    ///
    /// Valid values:
    ///   * 0 - 62 = X tokens every hour
    ///   * 63     = no limitation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayEdUplinkLimitReloadRate {
      get { return relayEdUplinkLimitReloadRate_; }
      set {
        relayEdUplinkLimitReloadRate_ = value;
      }
    }

    /// <summary>Field number for the "relay_join_req_limit_reload_rate" field.</summary>
    public const int RelayJoinReqLimitReloadRateFieldNumber = 44;
    private uint relayJoinReqLimitReloadRate_;
    /// <summary>
    /// Relay join-request limit reload rate.
    ///
    /// Valid values:
    ///   * 0 - 126 = X tokens every hour
    ///   * 127     = no limitation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayJoinReqLimitReloadRate {
      get { return relayJoinReqLimitReloadRate_; }
      set {
        relayJoinReqLimitReloadRate_ = value;
      }
    }

    /// <summary>Field number for the "relay_notify_limit_reload_rate" field.</summary>
    public const int RelayNotifyLimitReloadRateFieldNumber = 45;
    private uint relayNotifyLimitReloadRate_;
    /// <summary>
    /// Relay notify limit reload rate.
    ///
    /// Valid values:
    ///   * 0 - 126 = X tokens every hour
    ///   * 127     = no limitation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayNotifyLimitReloadRate {
      get { return relayNotifyLimitReloadRate_; }
      set {
        relayNotifyLimitReloadRate_ = value;
      }
    }

    /// <summary>Field number for the "relay_global_uplink_limit_reload_rate" field.</summary>
    public const int RelayGlobalUplinkLimitReloadRateFieldNumber = 46;
    private uint relayGlobalUplinkLimitReloadRate_;
    /// <summary>
    /// Relay global uplink limit reload rate.
    ///
    /// Valid values:
    ///   * 0 - 126 = X tokens every hour
    ///   * 127     = no limitation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayGlobalUplinkLimitReloadRate {
      get { return relayGlobalUplinkLimitReloadRate_; }
      set {
        relayGlobalUplinkLimitReloadRate_ = value;
      }
    }

    /// <summary>Field number for the "relay_overall_limit_reload_rate" field.</summary>
    public const int RelayOverallLimitReloadRateFieldNumber = 47;
    private uint relayOverallLimitReloadRate_;
    /// <summary>
    /// Relay overall limit reload rate.
    ///
    /// Valid values:
    ///   * 0 - 126 = X tokens every hour
    ///   * 127     = no limitation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayOverallLimitReloadRate {
      get { return relayOverallLimitReloadRate_; }
      set {
        relayOverallLimitReloadRate_ = value;
      }
    }

    /// <summary>Field number for the "relay_join_req_limit_bucket_size" field.</summary>
    public const int RelayJoinReqLimitBucketSizeFieldNumber = 48;
    private uint relayJoinReqLimitBucketSize_;
    /// <summary>
    /// Relay join-request limit bucket size.
    ///
    /// This field indicates the multiplier to determine the bucket size
    /// according to the following formula:
    /// BucketSize TOKEN = _reload_rate x _bucket_size
    ///
    /// Valid values (0 - 3):
    ///   0 = 1
    ///   1 = 2
    ///   2 = 4
    ///   3 = 12
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayJoinReqLimitBucketSize {
      get { return relayJoinReqLimitBucketSize_; }
      set {
        relayJoinReqLimitBucketSize_ = value;
      }
    }

    /// <summary>Field number for the "relay_notify_limit_bucket_size" field.</summary>
    public const int RelayNotifyLimitBucketSizeFieldNumber = 49;
    private uint relayNotifyLimitBucketSize_;
    /// <summary>
    /// Relay notify limit bucket size.
    ///
    /// This field indicates the multiplier to determine the bucket size
    /// according to the following formula:
    /// BucketSize TOKEN = _reload_rate x _bucket_size
    ///
    /// Valid values (0 - 3):
    ///   0 = 1
    ///   1 = 2
    ///   2 = 4
    ///   3 = 12
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayNotifyLimitBucketSize {
      get { return relayNotifyLimitBucketSize_; }
      set {
        relayNotifyLimitBucketSize_ = value;
      }
    }

    /// <summary>Field number for the "relay_global_uplink_limit_bucket_size" field.</summary>
    public const int RelayGlobalUplinkLimitBucketSizeFieldNumber = 50;
    private uint relayGlobalUplinkLimitBucketSize_;
    /// <summary>
    /// Relay globak uplink limit bucket size.
    ///
    /// This field indicates the multiplier to determine the bucket size
    /// according to the following formula:
    /// BucketSize TOKEN = _reload_rate x _bucket_size
    ///
    /// Valid values (0 - 3):
    ///   0 = 1
    ///   1 = 2
    ///   2 = 4
    ///   3 = 12
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayGlobalUplinkLimitBucketSize {
      get { return relayGlobalUplinkLimitBucketSize_; }
      set {
        relayGlobalUplinkLimitBucketSize_ = value;
      }
    }

    /// <summary>Field number for the "relay_overall_limit_bucket_size" field.</summary>
    public const int RelayOverallLimitBucketSizeFieldNumber = 51;
    private uint relayOverallLimitBucketSize_;
    /// <summary>
    /// Relay overall limit bucket size.
    ///
    /// This field indicates the multiplier to determine the bucket size
    /// according to the following formula:
    /// BucketSize TOKEN = _reload_rate x _bucket_size
    ///
    /// Valid values (0 - 3):
    ///   0 = 1
    ///   1 = 2
    ///   2 = 4
    ///   3 = 12
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayOverallLimitBucketSize {
      get { return relayOverallLimitBucketSize_; }
      set {
        relayOverallLimitBucketSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DeviceProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DeviceProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TenantId != other.TenantId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Region != other.Region) return false;
      if (MacVersion != other.MacVersion) return false;
      if (RegParamsRevision != other.RegParamsRevision) return false;
      if (AdrAlgorithmId != other.AdrAlgorithmId) return false;
      if (PayloadCodecRuntime != other.PayloadCodecRuntime) return false;
      if (PayloadCodecScript != other.PayloadCodecScript) return false;
      if (FlushQueueOnActivate != other.FlushQueueOnActivate) return false;
      if (UplinkInterval != other.UplinkInterval) return false;
      if (DeviceStatusReqInterval != other.DeviceStatusReqInterval) return false;
      if (SupportsOtaa != other.SupportsOtaa) return false;
      if (SupportsClassB != other.SupportsClassB) return false;
      if (SupportsClassC != other.SupportsClassC) return false;
      if (ClassBTimeout != other.ClassBTimeout) return false;
      if (ClassBPingSlotNbK != other.ClassBPingSlotNbK) return false;
      if (ClassBPingSlotDr != other.ClassBPingSlotDr) return false;
      if (ClassBPingSlotFreq != other.ClassBPingSlotFreq) return false;
      if (ClassCTimeout != other.ClassCTimeout) return false;
      if (AbpRx1Delay != other.AbpRx1Delay) return false;
      if (AbpRx1DrOffset != other.AbpRx1DrOffset) return false;
      if (AbpRx2Dr != other.AbpRx2Dr) return false;
      if (AbpRx2Freq != other.AbpRx2Freq) return false;
      if (!Tags.Equals(other.Tags)) return false;
      if (!Measurements.Equals(other.Measurements)) return false;
      if (AutoDetectMeasurements != other.AutoDetectMeasurements) return false;
      if (RegionConfigId != other.RegionConfigId) return false;
      if (IsRelay != other.IsRelay) return false;
      if (IsRelayEd != other.IsRelayEd) return false;
      if (RelayEdRelayOnly != other.RelayEdRelayOnly) return false;
      if (RelayEnabled != other.RelayEnabled) return false;
      if (RelayCadPeriodicity != other.RelayCadPeriodicity) return false;
      if (RelayDefaultChannelIndex != other.RelayDefaultChannelIndex) return false;
      if (RelaySecondChannelFreq != other.RelaySecondChannelFreq) return false;
      if (RelaySecondChannelDr != other.RelaySecondChannelDr) return false;
      if (RelaySecondChannelAckOffset != other.RelaySecondChannelAckOffset) return false;
      if (RelayEdActivationMode != other.RelayEdActivationMode) return false;
      if (RelayEdSmartEnableLevel != other.RelayEdSmartEnableLevel) return false;
      if (RelayEdBackOff != other.RelayEdBackOff) return false;
      if (RelayEdUplinkLimitBucketSize != other.RelayEdUplinkLimitBucketSize) return false;
      if (RelayEdUplinkLimitReloadRate != other.RelayEdUplinkLimitReloadRate) return false;
      if (RelayJoinReqLimitReloadRate != other.RelayJoinReqLimitReloadRate) return false;
      if (RelayNotifyLimitReloadRate != other.RelayNotifyLimitReloadRate) return false;
      if (RelayGlobalUplinkLimitReloadRate != other.RelayGlobalUplinkLimitReloadRate) return false;
      if (RelayOverallLimitReloadRate != other.RelayOverallLimitReloadRate) return false;
      if (RelayJoinReqLimitBucketSize != other.RelayJoinReqLimitBucketSize) return false;
      if (RelayNotifyLimitBucketSize != other.RelayNotifyLimitBucketSize) return false;
      if (RelayGlobalUplinkLimitBucketSize != other.RelayGlobalUplinkLimitBucketSize) return false;
      if (RelayOverallLimitBucketSize != other.RelayOverallLimitBucketSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TenantId.Length != 0) hash ^= TenantId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Region != global::Chirpstack.Common.Region.Eu868) hash ^= Region.GetHashCode();
      if (MacVersion != global::Chirpstack.Common.MacVersion.Lorawan100) hash ^= MacVersion.GetHashCode();
      if (RegParamsRevision != global::Chirpstack.Common.RegParamsRevision.A) hash ^= RegParamsRevision.GetHashCode();
      if (AdrAlgorithmId.Length != 0) hash ^= AdrAlgorithmId.GetHashCode();
      if (PayloadCodecRuntime != global::Chirpstack.Api.CodecRuntime.None) hash ^= PayloadCodecRuntime.GetHashCode();
      if (PayloadCodecScript.Length != 0) hash ^= PayloadCodecScript.GetHashCode();
      if (FlushQueueOnActivate != false) hash ^= FlushQueueOnActivate.GetHashCode();
      if (UplinkInterval != 0) hash ^= UplinkInterval.GetHashCode();
      if (DeviceStatusReqInterval != 0) hash ^= DeviceStatusReqInterval.GetHashCode();
      if (SupportsOtaa != false) hash ^= SupportsOtaa.GetHashCode();
      if (SupportsClassB != false) hash ^= SupportsClassB.GetHashCode();
      if (SupportsClassC != false) hash ^= SupportsClassC.GetHashCode();
      if (ClassBTimeout != 0) hash ^= ClassBTimeout.GetHashCode();
      if (ClassBPingSlotNbK != 0) hash ^= ClassBPingSlotNbK.GetHashCode();
      if (ClassBPingSlotDr != 0) hash ^= ClassBPingSlotDr.GetHashCode();
      if (ClassBPingSlotFreq != 0) hash ^= ClassBPingSlotFreq.GetHashCode();
      if (ClassCTimeout != 0) hash ^= ClassCTimeout.GetHashCode();
      if (AbpRx1Delay != 0) hash ^= AbpRx1Delay.GetHashCode();
      if (AbpRx1DrOffset != 0) hash ^= AbpRx1DrOffset.GetHashCode();
      if (AbpRx2Dr != 0) hash ^= AbpRx2Dr.GetHashCode();
      if (AbpRx2Freq != 0) hash ^= AbpRx2Freq.GetHashCode();
      hash ^= Tags.GetHashCode();
      hash ^= Measurements.GetHashCode();
      if (AutoDetectMeasurements != false) hash ^= AutoDetectMeasurements.GetHashCode();
      if (RegionConfigId.Length != 0) hash ^= RegionConfigId.GetHashCode();
      if (IsRelay != false) hash ^= IsRelay.GetHashCode();
      if (IsRelayEd != false) hash ^= IsRelayEd.GetHashCode();
      if (RelayEdRelayOnly != false) hash ^= RelayEdRelayOnly.GetHashCode();
      if (RelayEnabled != false) hash ^= RelayEnabled.GetHashCode();
      if (RelayCadPeriodicity != global::Chirpstack.Api.CadPeriodicity.Sec1) hash ^= RelayCadPeriodicity.GetHashCode();
      if (RelayDefaultChannelIndex != 0) hash ^= RelayDefaultChannelIndex.GetHashCode();
      if (RelaySecondChannelFreq != 0) hash ^= RelaySecondChannelFreq.GetHashCode();
      if (RelaySecondChannelDr != 0) hash ^= RelaySecondChannelDr.GetHashCode();
      if (RelaySecondChannelAckOffset != global::Chirpstack.Api.SecondChAckOffset.Khz0) hash ^= RelaySecondChannelAckOffset.GetHashCode();
      if (RelayEdActivationMode != global::Chirpstack.Api.RelayModeActivation.DisableRelayMode) hash ^= RelayEdActivationMode.GetHashCode();
      if (RelayEdSmartEnableLevel != 0) hash ^= RelayEdSmartEnableLevel.GetHashCode();
      if (RelayEdBackOff != 0) hash ^= RelayEdBackOff.GetHashCode();
      if (RelayEdUplinkLimitBucketSize != 0) hash ^= RelayEdUplinkLimitBucketSize.GetHashCode();
      if (RelayEdUplinkLimitReloadRate != 0) hash ^= RelayEdUplinkLimitReloadRate.GetHashCode();
      if (RelayJoinReqLimitReloadRate != 0) hash ^= RelayJoinReqLimitReloadRate.GetHashCode();
      if (RelayNotifyLimitReloadRate != 0) hash ^= RelayNotifyLimitReloadRate.GetHashCode();
      if (RelayGlobalUplinkLimitReloadRate != 0) hash ^= RelayGlobalUplinkLimitReloadRate.GetHashCode();
      if (RelayOverallLimitReloadRate != 0) hash ^= RelayOverallLimitReloadRate.GetHashCode();
      if (RelayJoinReqLimitBucketSize != 0) hash ^= RelayJoinReqLimitBucketSize.GetHashCode();
      if (RelayNotifyLimitBucketSize != 0) hash ^= RelayNotifyLimitBucketSize.GetHashCode();
      if (RelayGlobalUplinkLimitBucketSize != 0) hash ^= RelayGlobalUplinkLimitBucketSize.GetHashCode();
      if (RelayOverallLimitBucketSize != 0) hash ^= RelayOverallLimitBucketSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TenantId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TenantId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Region != global::Chirpstack.Common.Region.Eu868) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Region);
      }
      if (MacVersion != global::Chirpstack.Common.MacVersion.Lorawan100) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MacVersion);
      }
      if (RegParamsRevision != global::Chirpstack.Common.RegParamsRevision.A) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RegParamsRevision);
      }
      if (AdrAlgorithmId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AdrAlgorithmId);
      }
      if (PayloadCodecRuntime != global::Chirpstack.Api.CodecRuntime.None) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PayloadCodecRuntime);
      }
      if (PayloadCodecScript.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PayloadCodecScript);
      }
      if (FlushQueueOnActivate != false) {
        output.WriteRawTag(80);
        output.WriteBool(FlushQueueOnActivate);
      }
      if (UplinkInterval != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(UplinkInterval);
      }
      if (DeviceStatusReqInterval != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(DeviceStatusReqInterval);
      }
      if (SupportsOtaa != false) {
        output.WriteRawTag(104);
        output.WriteBool(SupportsOtaa);
      }
      if (SupportsClassB != false) {
        output.WriteRawTag(112);
        output.WriteBool(SupportsClassB);
      }
      if (SupportsClassC != false) {
        output.WriteRawTag(120);
        output.WriteBool(SupportsClassC);
      }
      if (ClassBTimeout != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(ClassBTimeout);
      }
      if (ClassBPingSlotNbK != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(ClassBPingSlotNbK);
      }
      if (ClassBPingSlotDr != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(ClassBPingSlotDr);
      }
      if (ClassBPingSlotFreq != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(ClassBPingSlotFreq);
      }
      if (ClassCTimeout != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(ClassCTimeout);
      }
      if (AbpRx1Delay != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(AbpRx1Delay);
      }
      if (AbpRx1DrOffset != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(AbpRx1DrOffset);
      }
      if (AbpRx2Dr != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(AbpRx2Dr);
      }
      if (AbpRx2Freq != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(AbpRx2Freq);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Description);
      }
      measurements_.WriteTo(output, _map_measurements_codec);
      if (AutoDetectMeasurements != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(AutoDetectMeasurements);
      }
      if (RegionConfigId.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(RegionConfigId);
      }
      if (IsRelay != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsRelay);
      }
      if (IsRelayEd != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(IsRelayEd);
      }
      if (RelayEdRelayOnly != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(RelayEdRelayOnly);
      }
      if (RelayEnabled != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(RelayEnabled);
      }
      if (RelayCadPeriodicity != global::Chirpstack.Api.CadPeriodicity.Sec1) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) RelayCadPeriodicity);
      }
      if (RelayDefaultChannelIndex != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(RelayDefaultChannelIndex);
      }
      if (RelaySecondChannelFreq != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(RelaySecondChannelFreq);
      }
      if (RelaySecondChannelDr != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(RelaySecondChannelDr);
      }
      if (RelaySecondChannelAckOffset != global::Chirpstack.Api.SecondChAckOffset.Khz0) {
        output.WriteRawTag(176, 2);
        output.WriteEnum((int) RelaySecondChannelAckOffset);
      }
      if (RelayEdActivationMode != global::Chirpstack.Api.RelayModeActivation.DisableRelayMode) {
        output.WriteRawTag(184, 2);
        output.WriteEnum((int) RelayEdActivationMode);
      }
      if (RelayEdSmartEnableLevel != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(RelayEdSmartEnableLevel);
      }
      if (RelayEdBackOff != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(RelayEdBackOff);
      }
      if (RelayEdUplinkLimitBucketSize != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(RelayEdUplinkLimitBucketSize);
      }
      if (RelayEdUplinkLimitReloadRate != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(RelayEdUplinkLimitReloadRate);
      }
      if (RelayJoinReqLimitReloadRate != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(RelayJoinReqLimitReloadRate);
      }
      if (RelayNotifyLimitReloadRate != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(RelayNotifyLimitReloadRate);
      }
      if (RelayGlobalUplinkLimitReloadRate != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(RelayGlobalUplinkLimitReloadRate);
      }
      if (RelayOverallLimitReloadRate != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(RelayOverallLimitReloadRate);
      }
      if (RelayJoinReqLimitBucketSize != 0) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(RelayJoinReqLimitBucketSize);
      }
      if (RelayNotifyLimitBucketSize != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(RelayNotifyLimitBucketSize);
      }
      if (RelayGlobalUplinkLimitBucketSize != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(RelayGlobalUplinkLimitBucketSize);
      }
      if (RelayOverallLimitBucketSize != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(RelayOverallLimitBucketSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TenantId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TenantId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Region != global::Chirpstack.Common.Region.Eu868) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Region);
      }
      if (MacVersion != global::Chirpstack.Common.MacVersion.Lorawan100) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MacVersion);
      }
      if (RegParamsRevision != global::Chirpstack.Common.RegParamsRevision.A) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RegParamsRevision);
      }
      if (AdrAlgorithmId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AdrAlgorithmId);
      }
      if (PayloadCodecRuntime != global::Chirpstack.Api.CodecRuntime.None) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PayloadCodecRuntime);
      }
      if (PayloadCodecScript.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PayloadCodecScript);
      }
      if (FlushQueueOnActivate != false) {
        output.WriteRawTag(80);
        output.WriteBool(FlushQueueOnActivate);
      }
      if (UplinkInterval != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(UplinkInterval);
      }
      if (DeviceStatusReqInterval != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(DeviceStatusReqInterval);
      }
      if (SupportsOtaa != false) {
        output.WriteRawTag(104);
        output.WriteBool(SupportsOtaa);
      }
      if (SupportsClassB != false) {
        output.WriteRawTag(112);
        output.WriteBool(SupportsClassB);
      }
      if (SupportsClassC != false) {
        output.WriteRawTag(120);
        output.WriteBool(SupportsClassC);
      }
      if (ClassBTimeout != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(ClassBTimeout);
      }
      if (ClassBPingSlotNbK != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(ClassBPingSlotNbK);
      }
      if (ClassBPingSlotDr != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(ClassBPingSlotDr);
      }
      if (ClassBPingSlotFreq != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(ClassBPingSlotFreq);
      }
      if (ClassCTimeout != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(ClassCTimeout);
      }
      if (AbpRx1Delay != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(AbpRx1Delay);
      }
      if (AbpRx1DrOffset != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(AbpRx1DrOffset);
      }
      if (AbpRx2Dr != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(AbpRx2Dr);
      }
      if (AbpRx2Freq != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(AbpRx2Freq);
      }
      tags_.WriteTo(ref output, _map_tags_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Description);
      }
      measurements_.WriteTo(ref output, _map_measurements_codec);
      if (AutoDetectMeasurements != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(AutoDetectMeasurements);
      }
      if (RegionConfigId.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(RegionConfigId);
      }
      if (IsRelay != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsRelay);
      }
      if (IsRelayEd != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(IsRelayEd);
      }
      if (RelayEdRelayOnly != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(RelayEdRelayOnly);
      }
      if (RelayEnabled != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(RelayEnabled);
      }
      if (RelayCadPeriodicity != global::Chirpstack.Api.CadPeriodicity.Sec1) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) RelayCadPeriodicity);
      }
      if (RelayDefaultChannelIndex != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(RelayDefaultChannelIndex);
      }
      if (RelaySecondChannelFreq != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(RelaySecondChannelFreq);
      }
      if (RelaySecondChannelDr != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(RelaySecondChannelDr);
      }
      if (RelaySecondChannelAckOffset != global::Chirpstack.Api.SecondChAckOffset.Khz0) {
        output.WriteRawTag(176, 2);
        output.WriteEnum((int) RelaySecondChannelAckOffset);
      }
      if (RelayEdActivationMode != global::Chirpstack.Api.RelayModeActivation.DisableRelayMode) {
        output.WriteRawTag(184, 2);
        output.WriteEnum((int) RelayEdActivationMode);
      }
      if (RelayEdSmartEnableLevel != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(RelayEdSmartEnableLevel);
      }
      if (RelayEdBackOff != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(RelayEdBackOff);
      }
      if (RelayEdUplinkLimitBucketSize != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(RelayEdUplinkLimitBucketSize);
      }
      if (RelayEdUplinkLimitReloadRate != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(RelayEdUplinkLimitReloadRate);
      }
      if (RelayJoinReqLimitReloadRate != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(RelayJoinReqLimitReloadRate);
      }
      if (RelayNotifyLimitReloadRate != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(RelayNotifyLimitReloadRate);
      }
      if (RelayGlobalUplinkLimitReloadRate != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(RelayGlobalUplinkLimitReloadRate);
      }
      if (RelayOverallLimitReloadRate != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(RelayOverallLimitReloadRate);
      }
      if (RelayJoinReqLimitBucketSize != 0) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(RelayJoinReqLimitBucketSize);
      }
      if (RelayNotifyLimitBucketSize != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(RelayNotifyLimitBucketSize);
      }
      if (RelayGlobalUplinkLimitBucketSize != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(RelayGlobalUplinkLimitBucketSize);
      }
      if (RelayOverallLimitBucketSize != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(RelayOverallLimitBucketSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TenantId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TenantId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Region != global::Chirpstack.Common.Region.Eu868) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Region);
      }
      if (MacVersion != global::Chirpstack.Common.MacVersion.Lorawan100) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MacVersion);
      }
      if (RegParamsRevision != global::Chirpstack.Common.RegParamsRevision.A) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RegParamsRevision);
      }
      if (AdrAlgorithmId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdrAlgorithmId);
      }
      if (PayloadCodecRuntime != global::Chirpstack.Api.CodecRuntime.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadCodecRuntime);
      }
      if (PayloadCodecScript.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayloadCodecScript);
      }
      if (FlushQueueOnActivate != false) {
        size += 1 + 1;
      }
      if (UplinkInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UplinkInterval);
      }
      if (DeviceStatusReqInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceStatusReqInterval);
      }
      if (SupportsOtaa != false) {
        size += 1 + 1;
      }
      if (SupportsClassB != false) {
        size += 1 + 1;
      }
      if (SupportsClassC != false) {
        size += 1 + 1;
      }
      if (ClassBTimeout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClassBTimeout);
      }
      if (ClassBPingSlotNbK != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClassBPingSlotNbK);
      }
      if (ClassBPingSlotDr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClassBPingSlotDr);
      }
      if (ClassBPingSlotFreq != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClassBPingSlotFreq);
      }
      if (ClassCTimeout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClassCTimeout);
      }
      if (AbpRx1Delay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AbpRx1Delay);
      }
      if (AbpRx1DrOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AbpRx1DrOffset);
      }
      if (AbpRx2Dr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AbpRx2Dr);
      }
      if (AbpRx2Freq != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AbpRx2Freq);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      size += measurements_.CalculateSize(_map_measurements_codec);
      if (AutoDetectMeasurements != false) {
        size += 2 + 1;
      }
      if (RegionConfigId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RegionConfigId);
      }
      if (IsRelay != false) {
        size += 2 + 1;
      }
      if (IsRelayEd != false) {
        size += 2 + 1;
      }
      if (RelayEdRelayOnly != false) {
        size += 2 + 1;
      }
      if (RelayEnabled != false) {
        size += 2 + 1;
      }
      if (RelayCadPeriodicity != global::Chirpstack.Api.CadPeriodicity.Sec1) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RelayCadPeriodicity);
      }
      if (RelayDefaultChannelIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayDefaultChannelIndex);
      }
      if (RelaySecondChannelFreq != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelaySecondChannelFreq);
      }
      if (RelaySecondChannelDr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelaySecondChannelDr);
      }
      if (RelaySecondChannelAckOffset != global::Chirpstack.Api.SecondChAckOffset.Khz0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RelaySecondChannelAckOffset);
      }
      if (RelayEdActivationMode != global::Chirpstack.Api.RelayModeActivation.DisableRelayMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RelayEdActivationMode);
      }
      if (RelayEdSmartEnableLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayEdSmartEnableLevel);
      }
      if (RelayEdBackOff != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayEdBackOff);
      }
      if (RelayEdUplinkLimitBucketSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayEdUplinkLimitBucketSize);
      }
      if (RelayEdUplinkLimitReloadRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayEdUplinkLimitReloadRate);
      }
      if (RelayJoinReqLimitReloadRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayJoinReqLimitReloadRate);
      }
      if (RelayNotifyLimitReloadRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayNotifyLimitReloadRate);
      }
      if (RelayGlobalUplinkLimitReloadRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayGlobalUplinkLimitReloadRate);
      }
      if (RelayOverallLimitReloadRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayOverallLimitReloadRate);
      }
      if (RelayJoinReqLimitBucketSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayJoinReqLimitBucketSize);
      }
      if (RelayNotifyLimitBucketSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayNotifyLimitBucketSize);
      }
      if (RelayGlobalUplinkLimitBucketSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayGlobalUplinkLimitBucketSize);
      }
      if (RelayOverallLimitBucketSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayOverallLimitBucketSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DeviceProfile other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TenantId.Length != 0) {
        TenantId = other.TenantId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Region != global::Chirpstack.Common.Region.Eu868) {
        Region = other.Region;
      }
      if (other.MacVersion != global::Chirpstack.Common.MacVersion.Lorawan100) {
        MacVersion = other.MacVersion;
      }
      if (other.RegParamsRevision != global::Chirpstack.Common.RegParamsRevision.A) {
        RegParamsRevision = other.RegParamsRevision;
      }
      if (other.AdrAlgorithmId.Length != 0) {
        AdrAlgorithmId = other.AdrAlgorithmId;
      }
      if (other.PayloadCodecRuntime != global::Chirpstack.Api.CodecRuntime.None) {
        PayloadCodecRuntime = other.PayloadCodecRuntime;
      }
      if (other.PayloadCodecScript.Length != 0) {
        PayloadCodecScript = other.PayloadCodecScript;
      }
      if (other.FlushQueueOnActivate != false) {
        FlushQueueOnActivate = other.FlushQueueOnActivate;
      }
      if (other.UplinkInterval != 0) {
        UplinkInterval = other.UplinkInterval;
      }
      if (other.DeviceStatusReqInterval != 0) {
        DeviceStatusReqInterval = other.DeviceStatusReqInterval;
      }
      if (other.SupportsOtaa != false) {
        SupportsOtaa = other.SupportsOtaa;
      }
      if (other.SupportsClassB != false) {
        SupportsClassB = other.SupportsClassB;
      }
      if (other.SupportsClassC != false) {
        SupportsClassC = other.SupportsClassC;
      }
      if (other.ClassBTimeout != 0) {
        ClassBTimeout = other.ClassBTimeout;
      }
      if (other.ClassBPingSlotNbK != 0) {
        ClassBPingSlotNbK = other.ClassBPingSlotNbK;
      }
      if (other.ClassBPingSlotDr != 0) {
        ClassBPingSlotDr = other.ClassBPingSlotDr;
      }
      if (other.ClassBPingSlotFreq != 0) {
        ClassBPingSlotFreq = other.ClassBPingSlotFreq;
      }
      if (other.ClassCTimeout != 0) {
        ClassCTimeout = other.ClassCTimeout;
      }
      if (other.AbpRx1Delay != 0) {
        AbpRx1Delay = other.AbpRx1Delay;
      }
      if (other.AbpRx1DrOffset != 0) {
        AbpRx1DrOffset = other.AbpRx1DrOffset;
      }
      if (other.AbpRx2Dr != 0) {
        AbpRx2Dr = other.AbpRx2Dr;
      }
      if (other.AbpRx2Freq != 0) {
        AbpRx2Freq = other.AbpRx2Freq;
      }
      tags_.Add(other.tags_);
      measurements_.Add(other.measurements_);
      if (other.AutoDetectMeasurements != false) {
        AutoDetectMeasurements = other.AutoDetectMeasurements;
      }
      if (other.RegionConfigId.Length != 0) {
        RegionConfigId = other.RegionConfigId;
      }
      if (other.IsRelay != false) {
        IsRelay = other.IsRelay;
      }
      if (other.IsRelayEd != false) {
        IsRelayEd = other.IsRelayEd;
      }
      if (other.RelayEdRelayOnly != false) {
        RelayEdRelayOnly = other.RelayEdRelayOnly;
      }
      if (other.RelayEnabled != false) {
        RelayEnabled = other.RelayEnabled;
      }
      if (other.RelayCadPeriodicity != global::Chirpstack.Api.CadPeriodicity.Sec1) {
        RelayCadPeriodicity = other.RelayCadPeriodicity;
      }
      if (other.RelayDefaultChannelIndex != 0) {
        RelayDefaultChannelIndex = other.RelayDefaultChannelIndex;
      }
      if (other.RelaySecondChannelFreq != 0) {
        RelaySecondChannelFreq = other.RelaySecondChannelFreq;
      }
      if (other.RelaySecondChannelDr != 0) {
        RelaySecondChannelDr = other.RelaySecondChannelDr;
      }
      if (other.RelaySecondChannelAckOffset != global::Chirpstack.Api.SecondChAckOffset.Khz0) {
        RelaySecondChannelAckOffset = other.RelaySecondChannelAckOffset;
      }
      if (other.RelayEdActivationMode != global::Chirpstack.Api.RelayModeActivation.DisableRelayMode) {
        RelayEdActivationMode = other.RelayEdActivationMode;
      }
      if (other.RelayEdSmartEnableLevel != 0) {
        RelayEdSmartEnableLevel = other.RelayEdSmartEnableLevel;
      }
      if (other.RelayEdBackOff != 0) {
        RelayEdBackOff = other.RelayEdBackOff;
      }
      if (other.RelayEdUplinkLimitBucketSize != 0) {
        RelayEdUplinkLimitBucketSize = other.RelayEdUplinkLimitBucketSize;
      }
      if (other.RelayEdUplinkLimitReloadRate != 0) {
        RelayEdUplinkLimitReloadRate = other.RelayEdUplinkLimitReloadRate;
      }
      if (other.RelayJoinReqLimitReloadRate != 0) {
        RelayJoinReqLimitReloadRate = other.RelayJoinReqLimitReloadRate;
      }
      if (other.RelayNotifyLimitReloadRate != 0) {
        RelayNotifyLimitReloadRate = other.RelayNotifyLimitReloadRate;
      }
      if (other.RelayGlobalUplinkLimitReloadRate != 0) {
        RelayGlobalUplinkLimitReloadRate = other.RelayGlobalUplinkLimitReloadRate;
      }
      if (other.RelayOverallLimitReloadRate != 0) {
        RelayOverallLimitReloadRate = other.RelayOverallLimitReloadRate;
      }
      if (other.RelayJoinReqLimitBucketSize != 0) {
        RelayJoinReqLimitBucketSize = other.RelayJoinReqLimitBucketSize;
      }
      if (other.RelayNotifyLimitBucketSize != 0) {
        RelayNotifyLimitBucketSize = other.RelayNotifyLimitBucketSize;
      }
      if (other.RelayGlobalUplinkLimitBucketSize != 0) {
        RelayGlobalUplinkLimitBucketSize = other.RelayGlobalUplinkLimitBucketSize;
      }
      if (other.RelayOverallLimitBucketSize != 0) {
        RelayOverallLimitBucketSize = other.RelayOverallLimitBucketSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TenantId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Region = (global::Chirpstack.Common.Region) input.ReadEnum();
            break;
          }
          case 40: {
            MacVersion = (global::Chirpstack.Common.MacVersion) input.ReadEnum();
            break;
          }
          case 48: {
            RegParamsRevision = (global::Chirpstack.Common.RegParamsRevision) input.ReadEnum();
            break;
          }
          case 58: {
            AdrAlgorithmId = input.ReadString();
            break;
          }
          case 64: {
            PayloadCodecRuntime = (global::Chirpstack.Api.CodecRuntime) input.ReadEnum();
            break;
          }
          case 74: {
            PayloadCodecScript = input.ReadString();
            break;
          }
          case 80: {
            FlushQueueOnActivate = input.ReadBool();
            break;
          }
          case 88: {
            UplinkInterval = input.ReadUInt32();
            break;
          }
          case 96: {
            DeviceStatusReqInterval = input.ReadUInt32();
            break;
          }
          case 104: {
            SupportsOtaa = input.ReadBool();
            break;
          }
          case 112: {
            SupportsClassB = input.ReadBool();
            break;
          }
          case 120: {
            SupportsClassC = input.ReadBool();
            break;
          }
          case 128: {
            ClassBTimeout = input.ReadUInt32();
            break;
          }
          case 136: {
            ClassBPingSlotNbK = input.ReadUInt32();
            break;
          }
          case 144: {
            ClassBPingSlotDr = input.ReadUInt32();
            break;
          }
          case 152: {
            ClassBPingSlotFreq = input.ReadUInt32();
            break;
          }
          case 160: {
            ClassCTimeout = input.ReadUInt32();
            break;
          }
          case 168: {
            AbpRx1Delay = input.ReadUInt32();
            break;
          }
          case 176: {
            AbpRx1DrOffset = input.ReadUInt32();
            break;
          }
          case 184: {
            AbpRx2Dr = input.ReadUInt32();
            break;
          }
          case 192: {
            AbpRx2Freq = input.ReadUInt32();
            break;
          }
          case 202: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
          case 210: {
            Description = input.ReadString();
            break;
          }
          case 218: {
            measurements_.AddEntriesFrom(input, _map_measurements_codec);
            break;
          }
          case 224: {
            AutoDetectMeasurements = input.ReadBool();
            break;
          }
          case 234: {
            RegionConfigId = input.ReadString();
            break;
          }
          case 240: {
            IsRelay = input.ReadBool();
            break;
          }
          case 248: {
            IsRelayEd = input.ReadBool();
            break;
          }
          case 256: {
            RelayEdRelayOnly = input.ReadBool();
            break;
          }
          case 264: {
            RelayEnabled = input.ReadBool();
            break;
          }
          case 272: {
            RelayCadPeriodicity = (global::Chirpstack.Api.CadPeriodicity) input.ReadEnum();
            break;
          }
          case 280: {
            RelayDefaultChannelIndex = input.ReadUInt32();
            break;
          }
          case 288: {
            RelaySecondChannelFreq = input.ReadUInt32();
            break;
          }
          case 296: {
            RelaySecondChannelDr = input.ReadUInt32();
            break;
          }
          case 304: {
            RelaySecondChannelAckOffset = (global::Chirpstack.Api.SecondChAckOffset) input.ReadEnum();
            break;
          }
          case 312: {
            RelayEdActivationMode = (global::Chirpstack.Api.RelayModeActivation) input.ReadEnum();
            break;
          }
          case 320: {
            RelayEdSmartEnableLevel = input.ReadUInt32();
            break;
          }
          case 328: {
            RelayEdBackOff = input.ReadUInt32();
            break;
          }
          case 336: {
            RelayEdUplinkLimitBucketSize = input.ReadUInt32();
            break;
          }
          case 344: {
            RelayEdUplinkLimitReloadRate = input.ReadUInt32();
            break;
          }
          case 352: {
            RelayJoinReqLimitReloadRate = input.ReadUInt32();
            break;
          }
          case 360: {
            RelayNotifyLimitReloadRate = input.ReadUInt32();
            break;
          }
          case 368: {
            RelayGlobalUplinkLimitReloadRate = input.ReadUInt32();
            break;
          }
          case 376: {
            RelayOverallLimitReloadRate = input.ReadUInt32();
            break;
          }
          case 384: {
            RelayJoinReqLimitBucketSize = input.ReadUInt32();
            break;
          }
          case 392: {
            RelayNotifyLimitBucketSize = input.ReadUInt32();
            break;
          }
          case 400: {
            RelayGlobalUplinkLimitBucketSize = input.ReadUInt32();
            break;
          }
          case 408: {
            RelayOverallLimitBucketSize = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TenantId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Region = (global::Chirpstack.Common.Region) input.ReadEnum();
            break;
          }
          case 40: {
            MacVersion = (global::Chirpstack.Common.MacVersion) input.ReadEnum();
            break;
          }
          case 48: {
            RegParamsRevision = (global::Chirpstack.Common.RegParamsRevision) input.ReadEnum();
            break;
          }
          case 58: {
            AdrAlgorithmId = input.ReadString();
            break;
          }
          case 64: {
            PayloadCodecRuntime = (global::Chirpstack.Api.CodecRuntime) input.ReadEnum();
            break;
          }
          case 74: {
            PayloadCodecScript = input.ReadString();
            break;
          }
          case 80: {
            FlushQueueOnActivate = input.ReadBool();
            break;
          }
          case 88: {
            UplinkInterval = input.ReadUInt32();
            break;
          }
          case 96: {
            DeviceStatusReqInterval = input.ReadUInt32();
            break;
          }
          case 104: {
            SupportsOtaa = input.ReadBool();
            break;
          }
          case 112: {
            SupportsClassB = input.ReadBool();
            break;
          }
          case 120: {
            SupportsClassC = input.ReadBool();
            break;
          }
          case 128: {
            ClassBTimeout = input.ReadUInt32();
            break;
          }
          case 136: {
            ClassBPingSlotNbK = input.ReadUInt32();
            break;
          }
          case 144: {
            ClassBPingSlotDr = input.ReadUInt32();
            break;
          }
          case 152: {
            ClassBPingSlotFreq = input.ReadUInt32();
            break;
          }
          case 160: {
            ClassCTimeout = input.ReadUInt32();
            break;
          }
          case 168: {
            AbpRx1Delay = input.ReadUInt32();
            break;
          }
          case 176: {
            AbpRx1DrOffset = input.ReadUInt32();
            break;
          }
          case 184: {
            AbpRx2Dr = input.ReadUInt32();
            break;
          }
          case 192: {
            AbpRx2Freq = input.ReadUInt32();
            break;
          }
          case 202: {
            tags_.AddEntriesFrom(ref input, _map_tags_codec);
            break;
          }
          case 210: {
            Description = input.ReadString();
            break;
          }
          case 218: {
            measurements_.AddEntriesFrom(ref input, _map_measurements_codec);
            break;
          }
          case 224: {
            AutoDetectMeasurements = input.ReadBool();
            break;
          }
          case 234: {
            RegionConfigId = input.ReadString();
            break;
          }
          case 240: {
            IsRelay = input.ReadBool();
            break;
          }
          case 248: {
            IsRelayEd = input.ReadBool();
            break;
          }
          case 256: {
            RelayEdRelayOnly = input.ReadBool();
            break;
          }
          case 264: {
            RelayEnabled = input.ReadBool();
            break;
          }
          case 272: {
            RelayCadPeriodicity = (global::Chirpstack.Api.CadPeriodicity) input.ReadEnum();
            break;
          }
          case 280: {
            RelayDefaultChannelIndex = input.ReadUInt32();
            break;
          }
          case 288: {
            RelaySecondChannelFreq = input.ReadUInt32();
            break;
          }
          case 296: {
            RelaySecondChannelDr = input.ReadUInt32();
            break;
          }
          case 304: {
            RelaySecondChannelAckOffset = (global::Chirpstack.Api.SecondChAckOffset) input.ReadEnum();
            break;
          }
          case 312: {
            RelayEdActivationMode = (global::Chirpstack.Api.RelayModeActivation) input.ReadEnum();
            break;
          }
          case 320: {
            RelayEdSmartEnableLevel = input.ReadUInt32();
            break;
          }
          case 328: {
            RelayEdBackOff = input.ReadUInt32();
            break;
          }
          case 336: {
            RelayEdUplinkLimitBucketSize = input.ReadUInt32();
            break;
          }
          case 344: {
            RelayEdUplinkLimitReloadRate = input.ReadUInt32();
            break;
          }
          case 352: {
            RelayJoinReqLimitReloadRate = input.ReadUInt32();
            break;
          }
          case 360: {
            RelayNotifyLimitReloadRate = input.ReadUInt32();
            break;
          }
          case 368: {
            RelayGlobalUplinkLimitReloadRate = input.ReadUInt32();
            break;
          }
          case 376: {
            RelayOverallLimitReloadRate = input.ReadUInt32();
            break;
          }
          case 384: {
            RelayJoinReqLimitBucketSize = input.ReadUInt32();
            break;
          }
          case 392: {
            RelayNotifyLimitBucketSize = input.ReadUInt32();
            break;
          }
          case 400: {
            RelayGlobalUplinkLimitBucketSize = input.ReadUInt32();
            break;
          }
          case 408: {
            RelayOverallLimitBucketSize = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Measurement : pb::IMessage<Measurement>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Measurement> _parser = new pb::MessageParser<Measurement>(() => new Measurement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Measurement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Measurement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Measurement(Measurement other) : this() {
      name_ = other.name_;
      kind_ = other.kind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Measurement Clone() {
      return new Measurement(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name (user defined).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 3;
    private global::Chirpstack.Api.MeasurementKind kind_ = global::Chirpstack.Api.MeasurementKind.Unknown;
    /// <summary>
    /// Kind.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Api.MeasurementKind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Measurement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Measurement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Kind != other.Kind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Kind != global::Chirpstack.Api.MeasurementKind.Unknown) hash ^= Kind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Kind != global::Chirpstack.Api.MeasurementKind.Unknown) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Kind != global::Chirpstack.Api.MeasurementKind.Unknown) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Kind != global::Chirpstack.Api.MeasurementKind.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Measurement other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Kind != global::Chirpstack.Api.MeasurementKind.Unknown) {
        Kind = other.Kind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Kind = (global::Chirpstack.Api.MeasurementKind) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Kind = (global::Chirpstack.Api.MeasurementKind) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeviceProfileListItem : pb::IMessage<DeviceProfileListItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeviceProfileListItem> _parser = new pb::MessageParser<DeviceProfileListItem>(() => new DeviceProfileListItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DeviceProfileListItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceProfileListItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceProfileListItem(DeviceProfileListItem other) : this() {
      id_ = other.id_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      updatedAt_ = other.updatedAt_ != null ? other.updatedAt_.Clone() : null;
      name_ = other.name_;
      region_ = other.region_;
      macVersion_ = other.macVersion_;
      regParamsRevision_ = other.regParamsRevision_;
      supportsOtaa_ = other.supportsOtaa_;
      supportsClassB_ = other.supportsClassB_;
      supportsClassC_ = other.supportsClassC_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceProfileListItem Clone() {
      return new DeviceProfileListItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Device-profile ID (UUID).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// Created at timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updatedAt_;
    /// <summary>
    /// Last update timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 5;
    private global::Chirpstack.Common.Region region_ = global::Chirpstack.Common.Region.Eu868;
    /// <summary>
    /// Region.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Common.Region Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "mac_version" field.</summary>
    public const int MacVersionFieldNumber = 6;
    private global::Chirpstack.Common.MacVersion macVersion_ = global::Chirpstack.Common.MacVersion.Lorawan100;
    /// <summary>
    /// LoRaWAN mac-version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Common.MacVersion MacVersion {
      get { return macVersion_; }
      set {
        macVersion_ = value;
      }
    }

    /// <summary>Field number for the "reg_params_revision" field.</summary>
    public const int RegParamsRevisionFieldNumber = 7;
    private global::Chirpstack.Common.RegParamsRevision regParamsRevision_ = global::Chirpstack.Common.RegParamsRevision.A;
    /// <summary>
    /// Regional parameters revision.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Common.RegParamsRevision RegParamsRevision {
      get { return regParamsRevision_; }
      set {
        regParamsRevision_ = value;
      }
    }

    /// <summary>Field number for the "supports_otaa" field.</summary>
    public const int SupportsOtaaFieldNumber = 8;
    private bool supportsOtaa_;
    /// <summary>
    /// Supports OTAA.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SupportsOtaa {
      get { return supportsOtaa_; }
      set {
        supportsOtaa_ = value;
      }
    }

    /// <summary>Field number for the "supports_class_b" field.</summary>
    public const int SupportsClassBFieldNumber = 9;
    private bool supportsClassB_;
    /// <summary>
    /// Supports Class-B.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SupportsClassB {
      get { return supportsClassB_; }
      set {
        supportsClassB_ = value;
      }
    }

    /// <summary>Field number for the "supports_class_c" field.</summary>
    public const int SupportsClassCFieldNumber = 10;
    private bool supportsClassC_;
    /// <summary>
    /// Supports Class-C.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SupportsClassC {
      get { return supportsClassC_; }
      set {
        supportsClassC_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DeviceProfileListItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DeviceProfileListItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(UpdatedAt, other.UpdatedAt)) return false;
      if (Name != other.Name) return false;
      if (Region != other.Region) return false;
      if (MacVersion != other.MacVersion) return false;
      if (RegParamsRevision != other.RegParamsRevision) return false;
      if (SupportsOtaa != other.SupportsOtaa) return false;
      if (SupportsClassB != other.SupportsClassB) return false;
      if (SupportsClassC != other.SupportsClassC) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (updatedAt_ != null) hash ^= UpdatedAt.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Region != global::Chirpstack.Common.Region.Eu868) hash ^= Region.GetHashCode();
      if (MacVersion != global::Chirpstack.Common.MacVersion.Lorawan100) hash ^= MacVersion.GetHashCode();
      if (RegParamsRevision != global::Chirpstack.Common.RegParamsRevision.A) hash ^= RegParamsRevision.GetHashCode();
      if (SupportsOtaa != false) hash ^= SupportsOtaa.GetHashCode();
      if (SupportsClassB != false) hash ^= SupportsClassB.GetHashCode();
      if (SupportsClassC != false) hash ^= SupportsClassC.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreatedAt);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdatedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Region != global::Chirpstack.Common.Region.Eu868) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Region);
      }
      if (MacVersion != global::Chirpstack.Common.MacVersion.Lorawan100) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MacVersion);
      }
      if (RegParamsRevision != global::Chirpstack.Common.RegParamsRevision.A) {
        output.WriteRawTag(56);
        output.WriteEnum((int) RegParamsRevision);
      }
      if (SupportsOtaa != false) {
        output.WriteRawTag(64);
        output.WriteBool(SupportsOtaa);
      }
      if (SupportsClassB != false) {
        output.WriteRawTag(72);
        output.WriteBool(SupportsClassB);
      }
      if (SupportsClassC != false) {
        output.WriteRawTag(80);
        output.WriteBool(SupportsClassC);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreatedAt);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdatedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Region != global::Chirpstack.Common.Region.Eu868) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Region);
      }
      if (MacVersion != global::Chirpstack.Common.MacVersion.Lorawan100) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MacVersion);
      }
      if (RegParamsRevision != global::Chirpstack.Common.RegParamsRevision.A) {
        output.WriteRawTag(56);
        output.WriteEnum((int) RegParamsRevision);
      }
      if (SupportsOtaa != false) {
        output.WriteRawTag(64);
        output.WriteBool(SupportsOtaa);
      }
      if (SupportsClassB != false) {
        output.WriteRawTag(72);
        output.WriteBool(SupportsClassB);
      }
      if (SupportsClassC != false) {
        output.WriteRawTag(80);
        output.WriteBool(SupportsClassC);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (updatedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatedAt);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Region != global::Chirpstack.Common.Region.Eu868) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Region);
      }
      if (MacVersion != global::Chirpstack.Common.MacVersion.Lorawan100) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MacVersion);
      }
      if (RegParamsRevision != global::Chirpstack.Common.RegParamsRevision.A) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RegParamsRevision);
      }
      if (SupportsOtaa != false) {
        size += 1 + 1;
      }
      if (SupportsClassB != false) {
        size += 1 + 1;
      }
      if (SupportsClassC != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DeviceProfileListItem other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.updatedAt_ != null) {
        if (updatedAt_ == null) {
          UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdatedAt.MergeFrom(other.UpdatedAt);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Region != global::Chirpstack.Common.Region.Eu868) {
        Region = other.Region;
      }
      if (other.MacVersion != global::Chirpstack.Common.MacVersion.Lorawan100) {
        MacVersion = other.MacVersion;
      }
      if (other.RegParamsRevision != global::Chirpstack.Common.RegParamsRevision.A) {
        RegParamsRevision = other.RegParamsRevision;
      }
      if (other.SupportsOtaa != false) {
        SupportsOtaa = other.SupportsOtaa;
      }
      if (other.SupportsClassB != false) {
        SupportsClassB = other.SupportsClassB;
      }
      if (other.SupportsClassC != false) {
        SupportsClassC = other.SupportsClassC;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 26: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Region = (global::Chirpstack.Common.Region) input.ReadEnum();
            break;
          }
          case 48: {
            MacVersion = (global::Chirpstack.Common.MacVersion) input.ReadEnum();
            break;
          }
          case 56: {
            RegParamsRevision = (global::Chirpstack.Common.RegParamsRevision) input.ReadEnum();
            break;
          }
          case 64: {
            SupportsOtaa = input.ReadBool();
            break;
          }
          case 72: {
            SupportsClassB = input.ReadBool();
            break;
          }
          case 80: {
            SupportsClassC = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 26: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Region = (global::Chirpstack.Common.Region) input.ReadEnum();
            break;
          }
          case 48: {
            MacVersion = (global::Chirpstack.Common.MacVersion) input.ReadEnum();
            break;
          }
          case 56: {
            RegParamsRevision = (global::Chirpstack.Common.RegParamsRevision) input.ReadEnum();
            break;
          }
          case 64: {
            SupportsOtaa = input.ReadBool();
            break;
          }
          case 72: {
            SupportsClassB = input.ReadBool();
            break;
          }
          case 80: {
            SupportsClassC = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateDeviceProfileRequest : pb::IMessage<CreateDeviceProfileRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateDeviceProfileRequest> _parser = new pb::MessageParser<CreateDeviceProfileRequest>(() => new CreateDeviceProfileRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateDeviceProfileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDeviceProfileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDeviceProfileRequest(CreateDeviceProfileRequest other) : this() {
      deviceProfile_ = other.deviceProfile_ != null ? other.deviceProfile_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDeviceProfileRequest Clone() {
      return new CreateDeviceProfileRequest(this);
    }

    /// <summary>Field number for the "device_profile" field.</summary>
    public const int DeviceProfileFieldNumber = 1;
    private global::Chirpstack.Api.DeviceProfile deviceProfile_;
    /// <summary>
    /// Object to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Api.DeviceProfile DeviceProfile {
      get { return deviceProfile_; }
      set {
        deviceProfile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateDeviceProfileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateDeviceProfileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DeviceProfile, other.DeviceProfile)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (deviceProfile_ != null) hash ^= DeviceProfile.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (deviceProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeviceProfile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (deviceProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeviceProfile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (deviceProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceProfile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateDeviceProfileRequest other) {
      if (other == null) {
        return;
      }
      if (other.deviceProfile_ != null) {
        if (deviceProfile_ == null) {
          DeviceProfile = new global::Chirpstack.Api.DeviceProfile();
        }
        DeviceProfile.MergeFrom(other.DeviceProfile);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (deviceProfile_ == null) {
              DeviceProfile = new global::Chirpstack.Api.DeviceProfile();
            }
            input.ReadMessage(DeviceProfile);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (deviceProfile_ == null) {
              DeviceProfile = new global::Chirpstack.Api.DeviceProfile();
            }
            input.ReadMessage(DeviceProfile);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateDeviceProfileResponse : pb::IMessage<CreateDeviceProfileResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateDeviceProfileResponse> _parser = new pb::MessageParser<CreateDeviceProfileResponse>(() => new CreateDeviceProfileResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateDeviceProfileResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDeviceProfileResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDeviceProfileResponse(CreateDeviceProfileResponse other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDeviceProfileResponse Clone() {
      return new CreateDeviceProfileResponse(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID (UUID).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateDeviceProfileResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateDeviceProfileResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateDeviceProfileResponse other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetDeviceProfileRequest : pb::IMessage<GetDeviceProfileRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetDeviceProfileRequest> _parser = new pb::MessageParser<GetDeviceProfileRequest>(() => new GetDeviceProfileRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetDeviceProfileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDeviceProfileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDeviceProfileRequest(GetDeviceProfileRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDeviceProfileRequest Clone() {
      return new GetDeviceProfileRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID (UUID).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetDeviceProfileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetDeviceProfileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetDeviceProfileRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetDeviceProfileResponse : pb::IMessage<GetDeviceProfileResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetDeviceProfileResponse> _parser = new pb::MessageParser<GetDeviceProfileResponse>(() => new GetDeviceProfileResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetDeviceProfileResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDeviceProfileResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDeviceProfileResponse(GetDeviceProfileResponse other) : this() {
      deviceProfile_ = other.deviceProfile_ != null ? other.deviceProfile_.Clone() : null;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      updatedAt_ = other.updatedAt_ != null ? other.updatedAt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDeviceProfileResponse Clone() {
      return new GetDeviceProfileResponse(this);
    }

    /// <summary>Field number for the "device_profile" field.</summary>
    public const int DeviceProfileFieldNumber = 1;
    private global::Chirpstack.Api.DeviceProfile deviceProfile_;
    /// <summary>
    /// Device-profile object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Api.DeviceProfile DeviceProfile {
      get { return deviceProfile_; }
      set {
        deviceProfile_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// Created at timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updatedAt_;
    /// <summary>
    /// Last update timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetDeviceProfileResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetDeviceProfileResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DeviceProfile, other.DeviceProfile)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(UpdatedAt, other.UpdatedAt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (deviceProfile_ != null) hash ^= DeviceProfile.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (updatedAt_ != null) hash ^= UpdatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (deviceProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeviceProfile);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreatedAt);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (deviceProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeviceProfile);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreatedAt);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (deviceProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceProfile);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (updatedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetDeviceProfileResponse other) {
      if (other == null) {
        return;
      }
      if (other.deviceProfile_ != null) {
        if (deviceProfile_ == null) {
          DeviceProfile = new global::Chirpstack.Api.DeviceProfile();
        }
        DeviceProfile.MergeFrom(other.DeviceProfile);
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.updatedAt_ != null) {
        if (updatedAt_ == null) {
          UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdatedAt.MergeFrom(other.UpdatedAt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (deviceProfile_ == null) {
              DeviceProfile = new global::Chirpstack.Api.DeviceProfile();
            }
            input.ReadMessage(DeviceProfile);
            break;
          }
          case 18: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 26: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (deviceProfile_ == null) {
              DeviceProfile = new global::Chirpstack.Api.DeviceProfile();
            }
            input.ReadMessage(DeviceProfile);
            break;
          }
          case 18: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 26: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateDeviceProfileRequest : pb::IMessage<UpdateDeviceProfileRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateDeviceProfileRequest> _parser = new pb::MessageParser<UpdateDeviceProfileRequest>(() => new UpdateDeviceProfileRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UpdateDeviceProfileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateDeviceProfileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateDeviceProfileRequest(UpdateDeviceProfileRequest other) : this() {
      deviceProfile_ = other.deviceProfile_ != null ? other.deviceProfile_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateDeviceProfileRequest Clone() {
      return new UpdateDeviceProfileRequest(this);
    }

    /// <summary>Field number for the "device_profile" field.</summary>
    public const int DeviceProfileFieldNumber = 1;
    private global::Chirpstack.Api.DeviceProfile deviceProfile_;
    /// <summary>
    /// Device-profile object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.Api.DeviceProfile DeviceProfile {
      get { return deviceProfile_; }
      set {
        deviceProfile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UpdateDeviceProfileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UpdateDeviceProfileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DeviceProfile, other.DeviceProfile)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (deviceProfile_ != null) hash ^= DeviceProfile.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (deviceProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeviceProfile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (deviceProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeviceProfile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (deviceProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceProfile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UpdateDeviceProfileRequest other) {
      if (other == null) {
        return;
      }
      if (other.deviceProfile_ != null) {
        if (deviceProfile_ == null) {
          DeviceProfile = new global::Chirpstack.Api.DeviceProfile();
        }
        DeviceProfile.MergeFrom(other.DeviceProfile);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (deviceProfile_ == null) {
              DeviceProfile = new global::Chirpstack.Api.DeviceProfile();
            }
            input.ReadMessage(DeviceProfile);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (deviceProfile_ == null) {
              DeviceProfile = new global::Chirpstack.Api.DeviceProfile();
            }
            input.ReadMessage(DeviceProfile);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeleteDeviceProfileRequest : pb::IMessage<DeleteDeviceProfileRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteDeviceProfileRequest> _parser = new pb::MessageParser<DeleteDeviceProfileRequest>(() => new DeleteDeviceProfileRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DeleteDeviceProfileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeleteDeviceProfileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeleteDeviceProfileRequest(DeleteDeviceProfileRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeleteDeviceProfileRequest Clone() {
      return new DeleteDeviceProfileRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID (UUID).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DeleteDeviceProfileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DeleteDeviceProfileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DeleteDeviceProfileRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListDeviceProfilesRequest : pb::IMessage<ListDeviceProfilesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListDeviceProfilesRequest> _parser = new pb::MessageParser<ListDeviceProfilesRequest>(() => new ListDeviceProfilesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ListDeviceProfilesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListDeviceProfilesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListDeviceProfilesRequest(ListDeviceProfilesRequest other) : this() {
      limit_ = other.limit_;
      offset_ = other.offset_;
      search_ = other.search_;
      tenantId_ = other.tenantId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListDeviceProfilesRequest Clone() {
      return new ListDeviceProfilesRequest(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private uint limit_;
    /// <summary>
    /// Max number of device-profiles to return in the result-set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private uint offset_;
    /// <summary>
    /// Offset in the result-set (for pagination).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "search" field.</summary>
    public const int SearchFieldNumber = 3;
    private string search_ = "";
    /// <summary>
    /// If set, the given string will be used to search on name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Search {
      get { return search_; }
      set {
        search_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tenant_id" field.</summary>
    public const int TenantIdFieldNumber = 4;
    private string tenantId_ = "";
    /// <summary>
    /// Tenant ID to list the device-profiles for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TenantId {
      get { return tenantId_; }
      set {
        tenantId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ListDeviceProfilesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ListDeviceProfilesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      if (Offset != other.Offset) return false;
      if (Search != other.Search) return false;
      if (TenantId != other.TenantId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Search.Length != 0) hash ^= Search.GetHashCode();
      if (TenantId.Length != 0) hash ^= TenantId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Limit != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Limit);
      }
      if (Offset != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Offset);
      }
      if (Search.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Search);
      }
      if (TenantId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TenantId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Limit != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Limit);
      }
      if (Offset != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Offset);
      }
      if (Search.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Search);
      }
      if (TenantId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TenantId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Limit);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Offset);
      }
      if (Search.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Search);
      }
      if (TenantId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TenantId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ListDeviceProfilesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Search.Length != 0) {
        Search = other.Search;
      }
      if (other.TenantId.Length != 0) {
        TenantId = other.TenantId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Limit = input.ReadUInt32();
            break;
          }
          case 16: {
            Offset = input.ReadUInt32();
            break;
          }
          case 26: {
            Search = input.ReadString();
            break;
          }
          case 34: {
            TenantId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Limit = input.ReadUInt32();
            break;
          }
          case 16: {
            Offset = input.ReadUInt32();
            break;
          }
          case 26: {
            Search = input.ReadString();
            break;
          }
          case 34: {
            TenantId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListDeviceProfilesResponse : pb::IMessage<ListDeviceProfilesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListDeviceProfilesResponse> _parser = new pb::MessageParser<ListDeviceProfilesResponse>(() => new ListDeviceProfilesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ListDeviceProfilesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListDeviceProfilesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListDeviceProfilesResponse(ListDeviceProfilesResponse other) : this() {
      totalCount_ = other.totalCount_;
      result_ = other.result_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListDeviceProfilesResponse Clone() {
      return new ListDeviceProfilesResponse(this);
    }

    /// <summary>Field number for the "total_count" field.</summary>
    public const int TotalCountFieldNumber = 1;
    private uint totalCount_;
    /// <summary>
    /// Total number of device-profiles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Chirpstack.Api.DeviceProfileListItem> _repeated_result_codec
        = pb::FieldCodec.ForMessage(18, global::Chirpstack.Api.DeviceProfileListItem.Parser);
    private readonly pbc::RepeatedField<global::Chirpstack.Api.DeviceProfileListItem> result_ = new pbc::RepeatedField<global::Chirpstack.Api.DeviceProfileListItem>();
    /// <summary>
    /// Result-set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Chirpstack.Api.DeviceProfileListItem> Result {
      get { return result_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ListDeviceProfilesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ListDeviceProfilesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalCount != other.TotalCount) return false;
      if(!result_.Equals(other.result_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalCount != 0) hash ^= TotalCount.GetHashCode();
      hash ^= result_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalCount);
      }
      result_.WriteTo(output, _repeated_result_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalCount);
      }
      result_.WriteTo(ref output, _repeated_result_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalCount);
      }
      size += result_.CalculateSize(_repeated_result_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ListDeviceProfilesResponse other) {
      if (other == null) {
        return;
      }
      if (other.TotalCount != 0) {
        TotalCount = other.TotalCount;
      }
      result_.Add(other.result_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalCount = input.ReadUInt32();
            break;
          }
          case 18: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalCount = input.ReadUInt32();
            break;
          }
          case 18: {
            result_.AddEntriesFrom(ref input, _repeated_result_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListDeviceProfileAdrAlgorithmsResponse : pb::IMessage<ListDeviceProfileAdrAlgorithmsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListDeviceProfileAdrAlgorithmsResponse> _parser = new pb::MessageParser<ListDeviceProfileAdrAlgorithmsResponse>(() => new ListDeviceProfileAdrAlgorithmsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ListDeviceProfileAdrAlgorithmsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListDeviceProfileAdrAlgorithmsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListDeviceProfileAdrAlgorithmsResponse(ListDeviceProfileAdrAlgorithmsResponse other) : this() {
      totalCount_ = other.totalCount_;
      result_ = other.result_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListDeviceProfileAdrAlgorithmsResponse Clone() {
      return new ListDeviceProfileAdrAlgorithmsResponse(this);
    }

    /// <summary>Field number for the "total_count" field.</summary>
    public const int TotalCountFieldNumber = 1;
    private uint totalCount_;
    /// <summary>
    /// Total number of algorithms.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Chirpstack.Api.AdrAlgorithmListItem> _repeated_result_codec
        = pb::FieldCodec.ForMessage(18, global::Chirpstack.Api.AdrAlgorithmListItem.Parser);
    private readonly pbc::RepeatedField<global::Chirpstack.Api.AdrAlgorithmListItem> result_ = new pbc::RepeatedField<global::Chirpstack.Api.AdrAlgorithmListItem>();
    /// <summary>
    /// Result-set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Chirpstack.Api.AdrAlgorithmListItem> Result {
      get { return result_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ListDeviceProfileAdrAlgorithmsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ListDeviceProfileAdrAlgorithmsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalCount != other.TotalCount) return false;
      if(!result_.Equals(other.result_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalCount != 0) hash ^= TotalCount.GetHashCode();
      hash ^= result_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalCount);
      }
      result_.WriteTo(output, _repeated_result_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalCount);
      }
      result_.WriteTo(ref output, _repeated_result_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalCount);
      }
      size += result_.CalculateSize(_repeated_result_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ListDeviceProfileAdrAlgorithmsResponse other) {
      if (other == null) {
        return;
      }
      if (other.TotalCount != 0) {
        TotalCount = other.TotalCount;
      }
      result_.Add(other.result_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalCount = input.ReadUInt32();
            break;
          }
          case 18: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalCount = input.ReadUInt32();
            break;
          }
          case 18: {
            result_.AddEntriesFrom(ref input, _repeated_result_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AdrAlgorithmListItem : pb::IMessage<AdrAlgorithmListItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdrAlgorithmListItem> _parser = new pb::MessageParser<AdrAlgorithmListItem>(() => new AdrAlgorithmListItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdrAlgorithmListItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.Api.DeviceProfileReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdrAlgorithmListItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdrAlgorithmListItem(AdrAlgorithmListItem other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdrAlgorithmListItem Clone() {
      return new AdrAlgorithmListItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Algorithm ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Algorithm name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdrAlgorithmListItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdrAlgorithmListItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdrAlgorithmListItem other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
